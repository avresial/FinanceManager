@page "/ManageAccount/{AccountId:int}"
@using FinanceManager.Core.Entities.Accounts
@using FinanceManager.Core.Repositories
@using FinanceManager.Presentation.Components.AccountDetailsPageContents.BankAccountComponents
@using FinanceManager.Presentation.Components.AccountDetailsPageContents.StockAccountComponents


@if (accountType is null)
{
    <DisplaySpinner />
}
else
{
    <div class="container-fluid px-0 mt-3" @ref=MyElementReference>
        @if (ErrorMessage != string.Empty)
        {
            <div class="alert alert-warning" role="alert">
                @ErrorMessage
            </div>
        }
        else if (accountType == typeof(BankAccount))
        {
            <ManageBankAccount AccountId="@AccountId" />
        }
        else if (accountType == typeof(InvestmentAccount))
        {
            <ManageStockAccount AccountId="@AccountId" />
        }
        else
        {
            <div class="alert alert-danger" role="alert">
                @accountType type is not supported.
            </div>
        }
    </div>
}


@code {
    public ElementReference MyElementReference;
    public Type? accountType = null;

    [Parameter]
    public required int AccountId { get; set; }

    [Inject]
    public required IFinancalAccountRepository BankAccountRepository { get; set; }

    public string ErrorMessage { get; set; } = string.Empty;


    protected override void OnInitialized()
    {
        UpdateEntries();
    }

    protected override void OnParametersSet()
    {
        MyElementReference = default;
        accountType = null;
        UpdateEntries();
    }
    private void UpdateEntries()
    {
        try
        {
            var accounts = BankAccountRepository.GetAvailableAccounts();
            if (accounts.ContainsKey(AccountId))
                accountType = accounts[AccountId];

        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}
