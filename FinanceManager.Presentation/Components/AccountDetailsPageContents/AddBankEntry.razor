@using FinanceManager.Core.Entities.Accounts
@using System.ComponentModel.DataAnnotations
@using FinanceManager.Core.Repositories
@inject ISettingsService settingsService

<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
    <MudContainer MaxWidth="MaxWidth.Medium">

        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="12" md="12">
                <MudText Typo="Typo.h4">Add new entry</MudText>
                <MudText Typo="Typo.subtitle1">@BankAccount.Name</MudText>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudNumericField Required="true" HideSpinButtons="true" @bind-Value="BalanceChange" Label="Balance change" Variant="Variant.Text" AdornmentText="@_currency" Adornment="Adornment.End" />
            </MudItem>
            @*   <MudItem xs="12" sm="6">
            <MudNumericField Required="true" HideSpinButtons="true" @bind-Value="Balance" Label="Balance" Variant="Variant.Text" AdornmentText="@_currency" Adornment="Adornment.End" />
            </MudItem> *@
            <MudItem xs="12">
                <MudTextField @bind-Value="Description" T="string" Label="Description" Variant="Variant.Text" MaxLines="5" AutoGrow="true" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTimePicker Label="Time" @bind-Time="Time" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudDatePicker Label="Posting date" @bind-Date="PostingDate" Validation="@(new WithinSixYearsAttribute())" />
            </MudItem>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick=Add>Add</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" DropShadow="false" OnClick=Cancel Class="mx-2">Cancel</MudButton>
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudForm>

@code {
    public class CustomDateAttribute : RangeAttribute
    {
        public CustomDateAttribute()
          : base(typeof(DateTime),
                  DateTime.Now.AddYears(-6).ToShortDateString(),
                  DateTime.Now.ToShortDateString())
        { }
    }
    public class WithinSixYearsAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            value = (DateTime)value;
            // This assumes inclusivity, i.e. exactly six years ago is okay
            if (DateTime.Now.AddYears(-6).CompareTo(value) <= 0 && DateTime.Now.CompareTo(value) >= 0)
            {
                return ValidationResult.Success;
            }
            else
            {
                return new ValidationResult("Date must be within the last six years!");
            }
        }
    }
    string _currency = "";
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
  
    [Required]
    [WithinSixYearsAttribute]
    private DateTime? PostingDate = DateTime.Today;
    private TimeSpan? Time = new TimeSpan(01, 00, 00);
    public string Description { get; set; }
    public decimal? BalanceChange { get; set; } = null;
    // public decimal? Balance { get; set; } = null;

    [Parameter]
    public Func<Task> ActionCompleted { get; set; }

    [Required]
    [Parameter]
    public BankAccount BankAccount { get; set; }

    [Inject]
    public IFinancalAccountRepository BankAccountRepository { get; set; }

    protected override Task OnParametersSetAsync()
    {
        _currency = settingsService.GetCurrency();
        return base.OnParametersSetAsync();
    }

    public async Task Add()
    {
        await form.Validate();
        if (!form.IsValid) return;
        if (!BalanceChange.HasValue) return;
        if (!PostingDate.HasValue) return;
        if (!Time.HasValue) return;

        DateTime date = new DateTime(PostingDate.Value.Year, PostingDate.Value.Month, PostingDate.Value.Day, Time.Value.Hours, Time.Value.Minutes, Time.Value.Seconds);
        var closestEntry = BankAccount.Get(date);
        decimal newValue = -1;
        if (closestEntry is not null)
        {
            newValue = closestEntry.First().Value + BalanceChange.Value;
        }

        BankAccountEntry bankAccountEntry = new(date, newValue, BalanceChange.Value)
            {
                Description = Description
            };
        try
        {
            BankAccount.Add(bankAccountEntry);
            BankAccountRepository.AddFinancialEntry(bankAccountEntry, BankAccount.Name);
        }
        catch (Exception ex)
        {
            errors = [ex.ToString()];
        }

        if (ActionCompleted is not null)
            await ActionCompleted();
    }

    public async Task Cancel()
    {
        if (ActionCompleted is not null)
            ActionCompleted();
    }

}
