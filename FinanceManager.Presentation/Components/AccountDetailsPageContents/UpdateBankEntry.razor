@using FinanceManager.Core.Entities.Accounts
@using System.ComponentModel.DataAnnotations
@using FinanceManager.Core.Enums
@using FinanceManager.Core.Repositories
@using FinanceManager.Presentation.CustomValidationAttributes
@inject ISettingsService settingsService

<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="12" md="12">
                <MudText Typo="Typo.h4">Add new entry</MudText>
                <MudText Typo="Typo.subtitle1">@BankAccount.Name</MudText>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTimePicker Label="Time" @bind-Time="Time" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudDatePicker Label="Posting date" @bind-Date="PostingDate" Validation="@(new NotInFutureAttribute())" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudNumericField Required="true" HideSpinButtons="true" @bind-Value="BalanceChange" Label="Balance change" Variant="Variant.Text" AdornmentText="@_currency" Adornment="Adornment.End" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudAutocomplete @bind-Value="ExpenseType" Label="Expense type" Variant="Variant.Text" SearchFunc="Search" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="Description" T="string" Label="Description" Variant="Variant.Text" MaxLines="5" AutoGrow="true" />
            </MudItem>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick=Update>Update</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" DropShadow="false" OnClick=Cancel Class="mx-2">Cancel</MudButton>
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudForm>

@code {
    private string? _currency;
    private bool success;
    private string[] errors = { };
    private MudForm? form;

    private List<string> ExpenseTypes = Enum.GetValues(typeof(ExpenseType)).Cast<ExpenseType>().Select(x => x.ToString()).ToList();

    private TimeSpan? Time;
    private DateTime? PostingDate;
    private string? ExpenseType { get; set; }
    private string? Description { get; set; }
    private decimal? BalanceChange { get; set; } = null;

    [Parameter]
    public Func<Task>? ActionCompleted { get; set; }

    [Parameter]
    public required BankAccount BankAccount { get; set; }

    [Parameter]
    public required BankAccountEntry BankAccountEntry { get; set; }

    [Inject]
    public required IFinancalAccountRepository BankAccountRepository { get; set; }

    protected override Task OnParametersSetAsync()
    {
        _currency = settingsService.GetCurrency();

        PostingDate = BankAccountEntry.PostingDate;
        Time = new TimeSpan(BankAccountEntry.PostingDate.Hour, BankAccountEntry.PostingDate.Minute, BankAccountEntry.PostingDate.Second);
        ExpenseType = BankAccountEntry.ExpenseType.ToString();
        Description = BankAccountEntry.Description;
        BalanceChange = BankAccountEntry.ValueChange;
        return base.OnParametersSetAsync();
    }

    public async Task Update()
    {
        await form.Validate();
        if (!form.IsValid) return;
        if (!BalanceChange.HasValue) return;
        if (!PostingDate.HasValue) return;
        if (!Time.HasValue) return;

        DateTime date = new DateTime(PostingDate.Value.Year, PostingDate.Value.Month, PostingDate.Value.Day, Time.Value.Hours, Time.Value.Minutes, Time.Value.Seconds);
        ExpenseType expenseType = FinanceManager.Core.Enums.ExpenseType.Other;
        try
        {
            expenseType = (ExpenseType)Enum.Parse(typeof(ExpenseType), ExpenseType);
        }
        catch (Exception)
        {
        }
        BankAccountEntry bankAccountEntry = new(date, -1, BalanceChange.Value)
            {
                Description = Description,
                ExpenseType = expenseType
            };
        try
        {
            BankAccount.Update(bankAccountEntry);
            BankAccountRepository.AddFinancialEntry(bankAccountEntry, BankAccount.Name);
        }
        catch (Exception ex)
        {
            errors = [ex.ToString()];
        }

        if (ActionCompleted is not null)
            await ActionCompleted();
    }

    public async Task Cancel()
    {
        if (ActionCompleted is not null)
            await ActionCompleted();
    }
    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return ExpenseTypes;

        return ExpenseTypes.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
