@using ApexCharts
@using FinanceManager.Core.Entities
@using FinanceManager.Core.Entities.Accounts
@using FinanceManager.Core.Repositories


@if (Account is not null && Account.Entries is not null)
{
    <div class="col-12" style="min-height:150px;">
        <ApexChart @ref="chart" TItem="InvestmentEntry" Height="150" Options=@options XAxisType="XAxisType.Datetime">
            <ApexPointSeries TItem="InvestmentEntry"
                             Items="Account.Entries"
                             Name="@Account.Name"
                             XValue="e => e.PostingDate.ToLocalTime()"
                             YValue="e=> e.Value"
                             SeriesType="SeriesType.Area"
                             OrderByDescending="@(e=>e.X)" />

        </ApexChart>
    </div>
    <div class="container">

        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Posting date</th>
                    <th scope="col">Unit</th>
                    <th scope="col">Unit change</th>
                    <th scope="col">Ticker</th>
                    <th scope="col">Price</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var entry in Account.Entries.OrderByDescending(x => x.PostingDate))
                {
                    <tr>
                        <td>@entry.PostingDate.ToString("yyyy-MM-dd")</td>
                        <td>@entry.Value</td>
                        @if (entry.ValueChange > 0)
                        {
                            <td class="text-success">@entry.ValueChange</td>
                        }
                        else
                        {
                            <td class="text-danger">@entry.ValueChange</td>
                        }
                        <td>@entry.Ticker </td>

                        <td>@((entry.Value * prices[entry].PricePerUnit).ToString("0.00")) @prices[entry].Currency</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private ApexChart<InvestmentEntry> chart;
    public StockAccount? Account { get; set; }
    public string ErrorMessage { get; set; } = string.Empty;

    [Parameter]
    public required string AccountName { get; set; }

    [Inject]
    public IFinancalAccountRepository BankAccountRepository { get; set; }

    [Inject]
    public IStockRepository StockRepository { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await UpdateEntries();
    }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateEntries();
    }
    public Type accountType;
    private Dictionary<InvestmentEntry, StockPrice> prices = new();
    private async Task UpdateEntries()
    {
        try
        {
            DateTime dateStart = new DateTime(DateTime.UtcNow.Year, DateTime.UtcNow.Month, 1);
            var accounts = BankAccountRepository.GetAvailableAccounts();
            if (accounts.ContainsKey(AccountName))
            {
                accountType = accounts[AccountName];
                if (accountType == typeof(StockAccount))
                {
                    Account = BankAccountRepository.GetAccount<StockAccount>(AccountName, dateStart, DateTime.UtcNow);

                    foreach (var entry in Account.Entries)
                    {
                        var price = await StockRepository.GetStockPrice(entry.Ticker, entry.PostingDate);
                        prices.Add(entry, price);
                    }
                }
            }

        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    private ApexChartOptions<InvestmentEntry> options { get; set; } = new()
        {
            Chart = new Chart
            {
                Sparkline = new ChartSparkline()
                {
                    Enabled = true,
                },
                Toolbar = new ApexCharts.Toolbar
                {
                    Show = false
                },
            },
            Xaxis = new XAxis()
            {
                AxisTicks = new AxisTicks()
                {
                    Show = false,
                },
                AxisBorder = new AxisBorder()
                {
                    Show = false
                },
            },
            Yaxis = new List<YAxis>()
            {
                new YAxis
                {
                    // AxisTicks = new AxisTicks()
                    // {
                    //     Show = false
                    // },
                 //   TickAmount = 1,
                    Show = false,
                    SeriesName = "Vaue",
                    DecimalsInFloat = 0,
                }
            },
            Colors = new List<string>
            {
                "#A9A9A9"
            }
        };
}
