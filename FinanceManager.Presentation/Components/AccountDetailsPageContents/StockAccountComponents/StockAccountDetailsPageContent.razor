@using ApexCharts
@using FinanceManager.Core.Entities
@using FinanceManager.Core.Entities.Accounts
@using FinanceManager.Core.Providers
@using FinanceManager.Core.Repositories
@using FinanceManager.Core.Services
@using FinanceManager.Presentation.Helpers


@if (Account is not null && Account.Entries is not null)
{
    <h3 class="m-3" style="position: absolute; z-index: 50; display: inline-block;">
        @Account.Name
    </h3>
    <div class="col-12 mb-2" style="min-height:150px;">
        <ApexChart @ref="chart" TItem="ChartEntryModel" Height="150" Options=@options XAxisType="XAxisType.Datetime">
            <ApexPointSeries TItem="ChartEntryModel"
                             Items="pricesDaily"
                             Name="@Account.Name"
                             XValue="e => e.Date.ToLocalTime()"
                             YValue="e=> e.Value"
                             SeriesType="SeriesType.Area"
                             OrderByDescending="@(e=>e.X)" />
        </ApexChart>
    </div>
    <div class="container">
        <div class="row mt-2">
            <div class="col-xs-12 col-lg-2">
                <div class="row">
                    <MudFab Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.Add" Label="Add" OnClick=ShowOverlay
                            Style="margin-left: 30px; position: fixed; bottom: 3vh; z-index:1000;" />

                    <MudOverlay Visible="@visible" DarkBackground="true">
                        <MudPaper Class="p-5">
                            <AddStockEntry InvestmentAccount=Account ActionCompleted="HideOverlay" />
                        </MudPaper>
                    </MudOverlay>
                </div>
            </div>
            <div class="col-xs-12 col-lg-7">
                <div class="row">
                    <MudExpansionPanels Elevation="0" MultiExpansion>
                        @foreach (var entry in Account.Entries.OrderByDescending(x => x.PostingDate))
                        {
                            <StockAccountDetailsRow InvestmentAccount=Account InvestmentEntry=entry />
                        }
                    </MudExpansionPanels>
                </div>
                <div class="row" style="min-height:40px">
                    @if (!LoadedAllData)
                    {
                        <button class="btn text-center" title="Load more" @onclick="LoadMore">
                            <div>
                                <i class="bi bi-arrow-bar-down"></i>
                            </div>
                        </button>
                    }
                </div>
            </div>
            <div class="col-3 d-none d-lg-block">
                <div class="row">
                    <h6 class="text-center">Stocks in wallet</h6>
                    <div class="d-flex flex-wrap justify-content-center">
                        @foreach (var stock in stocks)
                        {
                            <div class="px-2 m-1 rounded-pill border border-2">
                                @stock
                            </div>
                        }
                    </div>
                </div>
                @if (balanceChange.HasValue)
                {
                    <div class="row mt-2">
                        @if (balanceChange > 0)
                        {
                            <div class="row mb-3 mx-0 px-0">
                                <div class="col-6">
                                    <div class="row mb-1">
                                        <div>
                                            Balance change
                                        </div>
                                    </div>
                                </div>
                                <div class="col-6 text-end">
                                    <div class="row mb-1 text-success">
                                        <div class="test-end">@balanceChange.Value.ToString("0.00") @currency <i class="fs-5 bi bi-arrow-up-right"></i></div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="row mb-3 mx-0 px-0">
                                <div class="col-6">
                                    <div class="row mb-1">
                                        <div>
                                            Balance change
                                        </div>
                                    </div>
                                </div>
                                <div class="col-6 text-end">
                                    <div class="row mb-1 text-danger">
                                        <div class="test-end">@balanceChange.Value.ToString("0.00") @currency <i class="fs-5 bi bi-arrow-down-right"></i></div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                <div class="row mt-2">
                    @if (Top5 is not null)
                    {
                        <h6 class="text-center">Top 5</h6>
                        @foreach (var entry in Top5)
                        {
                            <div class="row mb-3 mx-0 px-0">
                                <div class="col-6">
                                    <div class="row mb-1">
                                        <div>
                                            @entry.Item1.Ticker
                                        </div>
                                    </div>
                                    <div class="row text-muted">
                                        <div style="font-size:0.8rem !important">
                                        </div>
                                    </div>
                                </div>
                                <div class="col-6 text-end">
                                    <div class="row mb-1">
                                        <div class="text-success">@entry.Item2.ToString("0.00") @currency</div>
                                    </div>
                                    <div class="row text-muted">
                                        <div style="font-size:0.8rem !important">
                                            @entry.Item1.PostingDate.ToString("yyyy-MM-dd")
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    @if (Bottom5 is not null)
                    {
                        <h6 class="text-center mt-2">Bottom 5</h6>
                        @foreach (var entry in Bottom5)
                        {
                            <div class="row mb-3 mx-0 px-0">
                                <div class="col-6">
                                    <div class="row mb-1">
                                        <div>
                                            @entry.Item1.Ticker
                                        </div>
                                    </div>
                                    <div class="row fs-6 text-muted">
                                        <div style="font-size:0.8rem !important">
                                        </div>
                                    </div>
                                </div>
                                <div class="col-6 text-end">
                                    <div class="row mb-1">
                                        <div class="text-danger">@entry.Item2.ToString("0.00") @currency</div>
                                    </div>
                                    <div class="row fs-6 text-muted">
                                        <div style="font-size:0.8rem !important">
                                            @entry.Item1.PostingDate.ToString("yyyy-MM-dd")
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private decimal? balanceChange = null;
    private ApexChart<ChartEntryModel> chart;
    private Dictionary<InvestmentEntry, StockPrice> prices = new();
    private List<string> stocks = new List<string>();
    private bool LoadedAllData = false;
    private DateTime dateStart;
    private List<ChartEntryModel> pricesDaily;
    internal List<(InvestmentEntry, decimal)>? Top5;
    internal List<(InvestmentEntry, decimal)>? Bottom5;
    internal string currency = "PLN";

    private bool visible;
    public InvestmentAccount? Account { get; set; }
    public string ErrorMessage { get; set; } = string.Empty;
    public Type accountType;

    [Parameter]
    public required string AccountName { get; set; }

    [Inject]
    public IFinancalAccountRepository BankAccountRepository { get; set; }

    [Inject]
    public IStockRepository StockRepository { get; set; }

    [Inject]
    public ISettingsService settingsService { get; set; }

    public async Task ShowOverlay()
    {
        visible = true;
        StateHasChanged();
    }

    public async Task HideOverlay()
    {
        visible = false;
        await UpdateInfo();
        if (chart is not null)
            await chart.RenderAsync();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        options.Tooltip = new ApexCharts.Tooltip
            {
                Y = new TooltipY
                {
                    Formatter = ChartHelper.GetCurrencyFormatter(settingsService.GetCurrency())
                }
            };
        await UpdateEntries();
    }

    protected override async Task OnParametersSetAsync()
    {
        LoadedAllData = false;
        await UpdateEntries();
    }

    private async Task UpdateEntries()
    {
        try
        {
            dateStart = new DateTime(DateTime.UtcNow.Year, DateTime.UtcNow.Month, 1);
            var accounts = BankAccountRepository.GetAvailableAccounts();
            if (accounts.ContainsKey(AccountName))
            {
                accountType = accounts[AccountName];
                if (accountType == typeof(InvestmentAccount))
                {
                    LoadedAllData = false;
                    prices.Clear();
                    Account = BankAccountRepository.GetAccount<InvestmentAccount>(AccountName, dateStart, DateTime.UtcNow);
                    if (Account is not null && Account.Entries is not null)
                        await UpdateInfo();
                }
            }

        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
            Console.WriteLine(ex);
        }
    }

    public async Task UpdateInfo()
    {
        if (Account is null || Account.Entries is null) return;
        stocks = Account.GetStoredTickers();
        foreach (var entry in Account.Entries)
        {
            if (prices.ContainsKey(entry)) continue;

            var price = await StockRepository.GetStockPrice(entry.Ticker, entry.PostingDate);
            prices.Add(entry, price);
        }

        if (Account.Entries.Last().PostingDate.Date > dateStart.Date) LoadedAllData = true;

        pricesDaily = (await Account.GetDailyPrice(StockRepository.GetStockPrice))
                                    .Select(x => new ChartEntryModel() { Date = x.Key.ToDateTime(new TimeOnly()), Value = x.Value })
                                    .ToList();

        if (pricesDaily is not null && pricesDaily.Count >= 2)
            balanceChange = pricesDaily.Last().Value - pricesDaily.First().Value;

        if (chart is not null) await chart.RenderAsync();

        List<(InvestmentEntry, decimal)> orderedByPrice = new List<(InvestmentEntry, decimal)>();
        foreach (var entry in Account.Entries)
        {
            var price = await StockRepository.GetStockPrice(entry.Ticker, entry.PostingDate);
            orderedByPrice.Add(new(entry, entry.ValueChange * price.PricePerUnit));
        }

        orderedByPrice = orderedByPrice.OrderByDescending(x => x.Item2).ToList();
        Top5 = orderedByPrice.Take(5).ToList();
        Bottom5 = orderedByPrice.Skip(Account.Entries.Count - 5).Take(5).OrderBy(x => x.Item2).ToList();
    }

    public async Task LoadMore()
    {
        if (Account is null) return;

        var newStartDate = Account.Start.Value.AddMonths(-1);
        var newData = BankAccountRepository.GetAccount<InvestmentAccount>(AccountName, newStartDate, Account.Start.Value);

        if (Account.Entries is null || newData is null || newData.Entries is null) return;
        if (newData.Entries.Last().PostingDate == Account.Entries.Last().PostingDate)
        {
            LoadedAllData = true;
            return;
        }

        Account.Add(newData.Entries.Skip(1));

        await UpdateInfo();
    }


    private ApexChartOptions<ChartEntryModel> options { get; set; } = new()
        {
            Chart = new Chart
            {
                Sparkline = new ChartSparkline()
                {
                    Enabled = true,
                },
                Toolbar = new ApexCharts.Toolbar
                {
                    Show = false
                },
            },
            Xaxis = new XAxis()
            {
                AxisTicks = new AxisTicks()
                {
                    Show = false,
                },
                AxisBorder = new AxisBorder()
                {
                    Show = false
                },
            },
            Yaxis = new List<YAxis>()
            {
                new YAxis
                {
                    // AxisTicks = new AxisTicks()
                    // {
                    //     Show = false
                    // },
                 //   TickAmount = 1,
                    Show = false,
                    SeriesName = "Vaue",
                    DecimalsInFloat = 0,
                }
            },
            Colors = new List<string>
            {
               ColorsProvider.GetColors().First()
            }
        };
}
