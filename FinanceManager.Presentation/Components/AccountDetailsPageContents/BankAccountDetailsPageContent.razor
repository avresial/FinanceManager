@using ApexCharts
@using FinanceManager.Core.Entities
@using FinanceManager.Core.Entities.Accounts
@using FinanceManager.Core.Repositories

@if (Account is not null && Account.Entries is not null)
{
    <div class="col-12" style="min-height:150px;">
        <ApexChart @ref="chart" TItem="BankAccountEntry" Height="150" Options=@options XAxisType="XAxisType.Datetime">
            <ApexPointSeries TItem="BankAccountEntry"
                             Items="Account.Entries"
                             Name="Income"
                             XValue="e => e.PostingDate.ToLocalTime()"
                             YValue="e=> e.Value"
                             SeriesType="SeriesType.Area"
                             OrderByDescending="@(e=>e.X)" />

        </ApexChart>
    </div>
    <div class="container">

        <div class="col-12 py-2">
            <h3>@Account.Name</h3>
        </div>

        <div class="row mt-2">
            <div class="col-9 px-3">
                <div class="row">
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">Posting date</th>
                                <th scope="col">Balance</th>
                                <th scope="col">Balance change</th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var entry in Account.Entries.OrderByDescending(x => x.PostingDate))
                            {
                                <tr>
                                    <td>@entry.PostingDate.ToString("yyyy-MM-dd")</td>
                                    <td>@entry.Value @currency</td>
                                    @if (entry.ValueChange > 0)
                                    {
                                        <td class="text-success">@entry.ValueChange @currency</td>
                                    }
                                    else
                                    {
                                        <td class="text-danger">@entry.ValueChange @currency</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                @if (!LoadedAllData)
                {
                    <div class="row">
                        <button class="btn text-center" title="Load more" @onclick="LoadMore">
                            <div>
                                <i class="bi bi-arrow-bar-down"></i>
                            </div>
                        </button>
                    </div>
                }
            </div>

            <div class="col-3">

                <div class="row">
                    @if (balanceChange > 0)
                    {
                        <div class="row mb-3 mx-0 px-0">
                            <div class="col-6">
                                <div class="row mb-1">
                                    <div>
                                        Balance change
                                    </div>
                                </div>
                            </div>
                            <div class="col-6 text-end">
                                <div class="row mb-1 text-success">
                                    <div class="test-end">@balanceChange @currency <i class="fs-5 bi bi-arrow-up-right"></i></div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row mb-3 mx-0 px-0">
                            <div class="col-6">
                                <div class="row mb-1">
                                    <div>
                                        Balance change
                                    </div>
                                </div>
                            </div>
                            <div class="col-6 text-end">
                                <div class="row mb-1 text-danger">
                                    <div class="test-end">@balanceChange @currency <i class="fs-5 bi bi-arrow-down-right"></i></div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="row">
                    @if (Top5 is not null)
                    {
                        <h6 class="text-center mt-2">Positive top 5</h6>
                        @foreach (var entry in Top5)
                        {
                            <div class="row mb-3 mx-0 px-0">
                                <div class="col-6">
                                    <div class="row mb-1">
                                        <div>
                                            Dept repayment
                                        </div>
                                    </div>
                                    <div class="row text-muted">
                                        <div style="font-size:0.8rem !important">
                                            @entry.Description
                                        </div>
                                    </div>
                                </div>
                                <div class="col-6 text-end">
                                    <div class="row mb-1">
                                        <div class="text-success">@entry.ValueChange @currency</div>
                                    </div>
                                    <div class="row text-muted">
                                        <div style="font-size:0.8rem !important">
                                            @entry.PostingDate.ToString("yyyy-MM-dd")
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    @if (Bottom5 is not null)
                    {
                        <h6 class="text-center mt-2">Negative top 5</h6>
                        @foreach (var entry in Bottom5)
                        {
                            <div class="row mb-3 mx-0 px-0">
                                <div class="col-6">
                                    <div class="row mb-1">
                                        <div>
                                            Dept repayment
                                        </div>
                                    </div>
                                    <div class="row fs-6 text-muted">
                                        <div style="font-size:0.8rem !important">
                                            @entry.Description
                                        </div>
                                    </div>
                                </div>
                                <div class="col-6 text-end">
                                    <div class="row mb-1">
                                        <div class="text-danger">@entry.ValueChange @currency</div>
                                    </div>
                                    <div class="row fs-6 text-muted">
                                        <div style="font-size:0.8rem !important">
                                            @entry.PostingDate.ToString("yyyy-MM-dd")
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {

    private ApexChart<BankAccountEntry> chart;
    public BankAccount? Account { get; set; }
    public string ErrorMessage { get; set; } = string.Empty;
    internal List<BankAccountEntry>? Top5;
    internal List<BankAccountEntry>? Bottom5;
    internal string currency = "PLN";
    decimal balanceChange = 100;
    bool LoadedAllData = false;

    private ApexChartOptions<BankAccountEntry> options { get; set; } = new()
        {
            Chart = new Chart
            {
                Sparkline = new ChartSparkline()
                {
                    Enabled = true,
                },
                Toolbar = new ApexCharts.Toolbar
                {
                    Show = false
                },
            },
            Xaxis = new XAxis()
            {
                AxisTicks = new AxisTicks()
                {
                    Show = false,
                },
                AxisBorder = new AxisBorder()
                {
                    Show = false
                },
            },
            Yaxis = new List<YAxis>()
            {
                new YAxis
                {
                    // AxisTicks = new AxisTicks()
                    // {
                    //     Show = false
                    // },
                 //   TickAmount = 1,
                    Show = false,
                    SeriesName = "Vaue",
                    DecimalsInFloat = 0,
                }
            },
            Colors = new List<string>
            {
                "#A9A9A9"
            }
        };

    [Parameter]
    public required string AccountName { get; set; }

    [Inject]
    public IFinancalAccountRepository BankAccountRepository { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await UpdateEntries();
    }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateEntries();
        if (chart is not null)
            await chart.RenderAsync();
    }
    public Type accountType;
    private async Task UpdateEntries()
    {
        try
        {
            DateTime dateStart = new DateTime(DateTime.UtcNow.Year, DateTime.UtcNow.Month, 1);
            var accounts = BankAccountRepository.GetAvailableAccounts();
            if (accounts.ContainsKey(AccountName))
            {
                accountType = accounts[AccountName];
                if (accountType == typeof(BankAccount))
                {
                    Account = BankAccountRepository.GetAccount<BankAccount>(AccountName, dateStart, DateTime.UtcNow);
                    if (Account is not null && Account.Entries is not null)
                        UpdateInfo();

                }
            }

        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    public void UpdateInfo()
    {
        var EntriesOrdered = Account.Entries.OrderByDescending(x => x.ValueChange);
        Top5 = EntriesOrdered.Take(5).ToList();
        Bottom5 = EntriesOrdered.Skip(Account.Entries.Count - 6).Take(5).OrderBy(x => x.ValueChange).ToList();
        balanceChange = Account.Entries.First().Value - Account.Entries.Last().Value;
    }

    public async Task LoadMore()
    {
        if (Account is null) return;

        var newStartDate = Account.Start.AddMonths(-1);
        var newData = BankAccountRepository.GetAccount<BankAccount>(AccountName, newStartDate, Account.Start);

        if (Account.Entries is null || newData is null || newData.Entries is null) return;
        if (newData.Entries.Last().PostingDate == Account.Entries.Last().PostingDate)
        {
            LoadedAllData = true;
            return;
        }

        Account.Entries.AddRange(newData.Entries);
        Account.SetDates(newStartDate, Account.End);

        if (chart is not null)
            await chart.RenderAsync();

        UpdateInfo();
    }
}
