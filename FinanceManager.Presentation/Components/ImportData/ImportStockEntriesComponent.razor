@using Microsoft.AspNetCore.Components.Forms
<MudContainer>

    <MudText Typo="Typo.h2">Import data to @AccountName account</MudText>

    <MudPaper>
        <MudStepper @bind-ActiveIndex="_index" OnPreviewInteraction="OnPreviewInteraction">
            <ChildContent>

                <MudStep Title="Select file" SecondaryText="Step1" @bind-Completed="_step1Complete">
                    <MudStack Style="width: 100%">
                        <MudForm Model="@File"
                                 @bind-IsValid="_isValid"
                                 @bind-IsTouched="_isTouched">
                            <MudItem xs="12">
                                <MudFileUpload T="IBrowserFile"
                                               @bind-File="File"
                                               For="@(() => File)"
                                               Hidden="@false"
                                               InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                                               InputStyle="opacity:0"
                                               ErrorText="@string.Empty"
                                               tabindex="-1"
                                               @ondrop="@ClearDragClass"
                                               @ondragenter="@SetDragClass"
                                               @ondragleave="@ClearDragClass"
                                               @ondragend="@ClearDragClass"
                                               OnFilesChanged="UploadFiles">

                                    <ActivatorContent>
                                        <MudPaper Height="300px"
                                                  Outlined="true"
                                                  Class="@_dragClass">
                                            <MudText Typo="Typo.h6">
                                                Drag and drop file here or click
                                            </MudText>
                                            @if (LoadedFiles is not null && LoadedFiles.Any())
                                            {
                                                @foreach (var item in LoadedFiles)
                                                {
                                                    <MudChip T="string" Color="Color.Dark" Text="@item.Name" />
                                                }
                                            }
                                        </MudPaper>
                                    </ActivatorContent>
                                </MudFileUpload>
                                <MudToolBar Gutters="@false"
                                            Class="relative d-flex justify-end gap-4">
                                   
                                    <MudButton Color="Color.Error"
                                               Disabled="@(!LoadedFiles.Any())"
                                               OnClick="@ClearFiles"
                                               Variant="Variant.Filled">
                                        Clear
                                    </MudButton>
                                </MudToolBar>
                            </MudItem>
                           
                        </MudForm>
                    </MudStack>
                </MudStep>

                <MudStep Title="Validate" SecondaryText="Step2" @bind-Completed="_step2Complete" Disabled="@(_step1Complete == false)">

                    <MudGrid>
                        <MudItem xs="12">
                            @foreach (var file in LoadedFiles)
                            {
                                @file.Name
                            }
                        </MudItem>

                        <MudItem xs="12">
                            @if (_isImportingData)
                            {
                                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                            }
                        </MudItem>

                        <MudItem xs="12">
                            <MudButton @onclick=FinishImport>Accept</MudButton>
                        </MudItem>
                    </MudGrid>

                </MudStep>
                <MudStep Title="Summary" SecondaryText="Step3" @bind-Completed="_step3Complete" Disabled="@(_step2Complete == false)">

                    Summary

                    <MudButton Variant="Variant.Text" Class="col-12" href="@($"AccountDetails/{AccountName}")">Go back to @AccountName</MudButton>
                </MudStep>
            </ChildContent>

            <ActionContent Context="stepper">
                <MudIconButton OnClick="@(() => stepper.PreviousStepAsync())" Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" Disabled="@(_index <= 0)" />
                <MudSpacer />
                <MudIconButton OnClick="@(() => stepper.NextStepAsync())" Icon="@Icons.Material.Filled.ArrowForward" Color="Color.Primary" />
            </ActionContent>
        </MudStepper>
    </MudPaper>

</MudContainer>
@code {
    private int _index;

    private bool _isImportingData = false;
    private bool _step1Complete;
    private bool _step2Complete;
    private bool _step3Complete;

    public async Task UploadFiles(InputFileChangeEventArgs e)
    {
        LoadedFiles = e.GetMultipleFiles(6).ToList();

        _step1Complete = LoadedFiles.Any();

        // _index++;
    }


    public IBrowserFile? File { get; set; } = null;
    private bool _isValid;
    private bool _isTouched;
    private const string FileContent = "this is content";
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;



    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;



    private async Task OnPreviewInteraction(StepperInteractionEventArgs arg)
    {
        if (arg.Action == StepAction.Complete)
        {
            await ControlStepCompletion(arg);
        }
        else if (arg.Action == StepAction.Activate)
        {
            await ControlStepNavigation(arg);
        }
    }

    private async Task ControlStepCompletion(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex)
        {
            case 0:
                if (_step1Complete != true)
                {
                    arg.Cancel = true;
                }
                break;
            case 1:
                if (_step2Complete != true)
                {
                    arg.Cancel = true;
                }
                break;
            case 2:
                if (_step3Complete != true)
                {
                    arg.Cancel = true;
                }
                break;
        }
    }

    private async Task ControlStepNavigation(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex)
        {
            case 1:
                if (_step1Complete != true)
                {
                    arg.Cancel = true;
                }
                break;
            case 2:
                if (_step2Complete != true)
                {
                    arg.Cancel = true;
                }
                break;
            case 3:
                if (_step3Complete != true)
                {
                    arg.Cancel = true;
                }
                break;
        }
    }




    public List<IBrowserFile> LoadedFiles = new();

    [Parameter]
    public required string AccountName { get; set; }


    public async Task ClearFiles()
    {
        if (LoadedFiles is not null)
            LoadedFiles.Clear();

        _step1Complete = false;
        _step2Complete = false;
        _step3Complete = false;
    }

    public async Task LoadFiles(InputFileChangeEventArgs e)
    {
        LoadedFiles = e.GetMultipleFiles(6).ToList();

        _step1Complete = LoadedFiles.Any();

        _index++;
    }
    public async Task FinishImport()
    {
        _isImportingData = true;
        await Task.Delay(3000);
        _step2Complete = true;
        _isImportingData = false;
        _index++;
    }
}
