@using ApexCharts
@using FinanceManager.Core.Entities
@using FinanceManager.Core.Repositories

@inject IBankAccountRepository bankAccountRepository;

<div class="card" style="height:300px;">
	<div class="card-body">
		<div>

			<h5 class="card-title">Assets</h5>
			<h6 class="card-subtitle mb-2 text-muted">$ @TotalAssets</h6>
		</div>
		<div>
			<ApexChart @ref="chart" Height="@height" TItem="WealthOverviewEntry" Options="options">


				<ApexPointSeries TItem="WealthOverviewEntry"
								 Items="Data"
								 Name="Assets"
								 XValue="@(e => e.Cathegory)"
								 YValue="e=> e.Value"
								 SeriesType="SeriesType.Pie" />

			</ApexChart>

		</div>
	</div>
</div>




@code {
	IEnumerable<BankAccount> bankAccounts;
	decimal TotalAssets = 0;
	string height = "100%";

	private ApexChart<WealthOverviewEntry> chart;

	private ApexChartOptions<WealthOverviewEntry> options { get; set; } = new()
		{
			Chart = new Chart
			{
				Toolbar = new ApexCharts.Toolbar
				{
					Show = false
				},
			},
			Xaxis = new XAxis()
			{
				AxisTicks = new AxisTicks()
				{
					Show = false,
				},
				AxisBorder = new AxisBorder()
				{
					Show = false
				},
				Position = XAxisPosition.Bottom,
				Type = XAxisType.Category

			},
			Yaxis = new List<YAxis>()
			{

				new YAxis
				{
					AxisTicks = new AxisTicks()
					{
						Show = false
					},
					Show = false,
					SeriesName = "NetValue",
					DecimalsInFloat = 0,
				}
			}
		};

	[Parameter]
	public List<WealthOverviewEntry> Data { get; set; } = new List<WealthOverviewEntry>();

	protected override Task OnAfterRenderAsync(bool firstRender)
	{
		return base.OnAfterRenderAsync(firstRender);
	}
	protected override async Task OnInitializedAsync()
	{

		await Task.Run(() =>
		{
			bankAccounts = bankAccountRepository.Get(new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1), DateTime.Now).Where(x => x.Entries.Any() && x.Entries.Last().Balance >= 0);
			TotalAssets = bankAccounts.Sum(x => x.Entries.Last().Balance);

			foreach (var account in bankAccounts)
			{
				var dataEntry = Data.FirstOrDefault(x => x.Cathegory == account.AccountType.ToString());

				if (dataEntry is not null)
				{
					dataEntry.Value += account.Entries.Last().Balance;
				}
				else
				{
					Data.Add(new WealthOverviewEntry()
						{
							Cathegory = account.AccountType.ToString(),
							Value = account.Entries.Last().Balance
						});
				}
			}
		});
	}


	// protected override async Task OnParametersSetAsync()
	// {
	// 	if (chart is null) return;

	// 	await chart?.UpdateSeriesAsync(true);
	// }
	public class WealthOverviewEntry
	{
		public string Cathegory;
		public decimal Value;
	}

}

