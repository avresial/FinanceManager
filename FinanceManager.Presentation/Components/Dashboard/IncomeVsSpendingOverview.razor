@using ApexCharts
@using FinanceManager.Core.Repositories

@inject IBankAccountRepository bankAccountRepository;


<div class="card">
	<div class="card-body">
		<h5 class="card-title">Income & expenses</h5>

		<ApexChart @ref="chart" TItem="IncomeVsSpendingEntry" Height="300" Options="options">


			<ApexPointSeries TItem="IncomeVsSpendingEntry"
							 Items="Data"
							 Name="Income"
							 XValue="@(e => e.Date)"
							 OrderByDescending="@(e => e.X)"
							 YAggregate="@(e => e.Sum(e => e.Income))"
							 SeriesType="SeriesType.Line" />

			<ApexPointSeries TItem="IncomeVsSpendingEntry"
							 Items="Data"
							 Name="Spending"
							 XValue="@(e => e.Date)"
							 OrderByDescending="@(e => e.X)"
							 YAggregate="@(e => e.Sum(e => e.Spending))"
							 SeriesType="SeriesType.Area" />

		</ApexChart>
	</div>
</div>




@code {
	private ApexChart<IncomeVsSpendingEntry> chart;

	private ApexChartOptions<IncomeVsSpendingEntry> options { get; set; } = new()
	{
			Colors = new List<string> { "#00FF00", "#FF0000" },
	};

	[Parameter]
	public List<IncomeVsSpendingEntry> Data { get; set; } = new List<IncomeVsSpendingEntry>();

	protected override void OnInitialized()
	{
		options.Chart = new Chart
			{
				Toolbar = new ApexCharts.Toolbar
				{
					Show = false
				},

			};


		options.Xaxis = new XAxis()
			{
				AxisTicks = new AxisTicks()
				{
					Show = false,
				},
				AxisBorder = new AxisBorder()
				{
					Show = false
				},
				Position = XAxisPosition.Bottom,
				Type = XAxisType.Datetime

			};

		options.Yaxis = new List<YAxis>();

		options.Yaxis.Add(new YAxis
			{
				AxisTicks = new AxisTicks()
				{
					Show = false
				},
				Show = false,
				SeriesName = "NetValue",
				DecimalsInFloat = 0,

			});

			

		var bankAccounts = bankAccountRepository.Get().Where(x => x.Entries.Any());

		foreach (var account in bankAccounts)
		{
			foreach (var entry in account.Entries)
			{
				var dataEntry = Data.FirstOrDefault(x => x.Date == entry.PostingDate.Date);
				if (dataEntry is null)
				{
					var newDataEntry = new IncomeVsSpendingEntry() { Date = entry.PostingDate.Date };
					if (entry.BalanceChange < 0)
					{
						newDataEntry.Spending = -entry.BalanceChange;
					}
					else
					{
						newDataEntry.Income = entry.BalanceChange;
					}

					Data.Add(newDataEntry);
				}
				else
				{
					if (entry.BalanceChange < 0)
					{
						dataEntry.Spending -= entry.BalanceChange;
					}
					else
					{
						dataEntry.Income += entry.BalanceChange;
					}
				}

			}
		}
	}


	protected override async Task OnParametersSetAsync()
	{
		if (chart is null) return;

		await chart?.UpdateSeriesAsync(true);
	}
	public class IncomeVsSpendingEntry
	{
		public DateTime Date;
		public decimal Income;
		public decimal Spending;
	}

}

