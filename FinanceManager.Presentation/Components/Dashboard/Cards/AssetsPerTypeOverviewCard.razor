@using ApexCharts
@using FinanceManager.Core.Entities
@using FinanceManager.Core.Entities.Accounts
@using FinanceManager.Core.Enums
@using FinanceManager.Core.Repositories
@using FinanceManager.Core.Services

@inject IFinancalAccountRepository bankAccountRepository;
@inject ISettingsService settingsService;
@inject IStockRepository stockRepository;

<div class="card" style="height:@Height;">
	<div class="card-body">
		<div class="container-fluid d-flex flex-column h-100">
			<div class="row">
				<div class="col px-0">
					<h5 class="card-title">Assets</h5>
					<h6 class="card-subtitle mb-2 text-muted">@Math.Round(TotalAssets, 2) @currency</h6>
				</div>
			</div>

			<div class="row flex-fill" style="height:1px;">
				<div class="h-100">

					<ApexChart @ref="chart" Height="@("100%")" TItem="WealthOverviewEntry" Options="options">


						<ApexPointSeries TItem="WealthOverviewEntry"
										 Items="Data"
										 Name="Assets"
										 XValue="e => e.Cathegory.ToString()"
										 YAggregate="@(e =>Math.Round( e.Sum(e => e.Value),2))"
										 SeriesType="SeriesType.Pie"
										 OrderByDescending="@(e=>e.Y.Value)" />

					</ApexChart>

				</div>
			</div>
		</div>
	</div>
</div>




@code {
	private string currency = "";
	decimal TotalAssets = 0;

	[Parameter]
	public string Height { get; set; } = "300px";

	[Parameter]
	public DateTime StartDateTime { get; set; }

	private ApexChart<WealthOverviewEntry> chart;

	private ApexChartOptions<WealthOverviewEntry> options { get; set; } = new()
		{
			Chart = new Chart
			{
				Toolbar = new ApexCharts.Toolbar
				{
					Show = false
				},
			},
			Xaxis = new XAxis()
			{
				AxisTicks = new AxisTicks()
				{
					Show = false,
				},
				AxisBorder = new AxisBorder()
				{
					Show = false
				},
				Position = XAxisPosition.Bottom,
				Type = XAxisType.Category

			},
			Yaxis = new List<YAxis>()
			{

				new YAxis
				{
					AxisTicks = new AxisTicks()
					{
						Show = false
					},
					Show = false,
					SeriesName = "NetValue",
					DecimalsInFloat = 0,
				}
			},
			Legend = new Legend()
			{
				Position = LegendPosition.Bottom,
			}
		};

	public List<WealthOverviewEntry> Data { get; set; } = new List<WealthOverviewEntry>();


	protected override async Task OnInitializedAsync()
	{
		currency = settingsService.GetCurrency();
	}


	protected override async Task OnParametersSetAsync()
	{
		foreach (var dataEntry in Data)
			dataEntry.Value = 0;

		if (chart is not null) await chart.UpdateSeriesAsync(true);

		//Data.AddRange(await GetData());
		await GetData();
		StateHasChanged();

		if (chart is not null) await chart.UpdateSeriesAsync(true);

	}

	async Task GetData()
	{
		await Task.Run(async () =>
			{
				var bankAccounts = bankAccountRepository.GetAccounts<BankAccount>(StartDateTime, DateTime.Now);
				if (bankAccounts is not null)
				{
					bankAccounts = bankAccounts.Where(x => x.Entries is not null && x.Entries.Any() && x.Entries.First().Value >= 0).ToList();

					foreach (var account in bankAccounts)
					{
						var dataEntry = Data.FirstOrDefault(x => x.Cathegory == account.AccountType.ToString());

						if (dataEntry is not null)
						{
							dataEntry.Value += account.Entries.First().Value;
						}
						else
						{
							Data.Add(new WealthOverviewEntry()
								{
									Cathegory = account.AccountType.ToString(),
									Value = account.Entries.First().Value
								});
						}
					}
				}

				var stockAccounts = bankAccountRepository.GetAccounts<StockAccount>(StartDateTime, DateTime.Now);
				if (stockAccounts is not null)
				{
					stockAccounts = stockAccounts.Where(x => x.Entries is not null && x.Entries.Any() && x.Entries.First().Value >= 0).ToList();

					foreach (var account in stockAccounts)
					{
						foreach (var investmentType in account.GetStoredTypes())
						{
							var dataEntry = Data.FirstOrDefault(x => x.Cathegory == investmentType.ToString());

							var entry = account.Entries.First(x => x.InvestmentType == investmentType);

							if (entry.Value < 0)
							{
								if (dataEntry is not null)
									dataEntry.Value = 0;

								continue;
							}

							if (dataEntry is not null)
							{
								var price = await stockRepository.GetStockPrice(entry.Ticker, entry.PostingDate);
								dataEntry.Value += price.PricePerUnit * entry.Value;
							}
							else
							{
								var price = await stockRepository.GetStockPrice(entry.Ticker, entry.PostingDate);
								Data.Add(new WealthOverviewEntry()
									{
										Cathegory = investmentType.ToString(),
										Value = price.PricePerUnit * entry.Value
									});
							}
						}
					}
				}

				TotalAssets = Data.Sum(x => x.Value);
			});
	}

	public class WealthOverviewEntry
	{
		public string Cathegory;
		public decimal Value;
	}

}

