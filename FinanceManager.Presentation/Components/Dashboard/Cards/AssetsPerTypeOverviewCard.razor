@using ApexCharts
@using FinanceManager.Core.Entities
@using FinanceManager.Core.Entities.Accounts
@using FinanceManager.Core.Enums
@using FinanceManager.Core.Repositories
@using FinanceManager.Core.Services

@inject IFinancalAccountRepository bankAccountRepository;
@inject ISettingsService settingsService;
@inject IStockRepository stockRepository;

<div class="card" style="height:@Height;">
	<div class="card-body">
		<div class="container-fluid d-flex flex-column h-100">
			<div class="row">
				<div class="col px-0">
					<h5 class="card-title">Assets</h5>
					<h6 class="card-subtitle mb-2 text-muted">@Math.Round(TotalAssets, 2) @currency</h6>
				</div>
			</div>

			<div class="row flex-fill" style="height:1px;">
				<div class="h-100">

					<ApexChart @ref="chart" Height="@("100%")" TItem="WealthOverviewEntry" Options="options">


						<ApexPointSeries TItem="WealthOverviewEntry"
										 Items="Data"
										 Name="Assets"
										 XValue="e => e.Cathegory.ToString()"
										 YAggregate="@(e =>Math.Round( e.Sum(e => e.Value),2))"
										 SeriesType="SeriesType.Pie"
										 OrderByDescending="@(e=>e.Y.Value)" />

					</ApexChart>

				</div>
			</div>
		</div>
	</div>
</div>




@code {
	private string currency = "";
	decimal TotalAssets = 0;

	[Parameter]
	public string Height { get; set; } = "300px";

	[Parameter]
	public DateTime StartDateTime { get; set; }

	private ApexChart<WealthOverviewEntry> chart;

	private ApexChartOptions<WealthOverviewEntry> options { get; set; } = new()
		{
			Chart = new Chart
			{
				Toolbar = new ApexCharts.Toolbar
				{
					Show = false
				},
			},
			Xaxis = new XAxis()
			{
				AxisTicks = new AxisTicks()
				{
					Show = false,
				},
				AxisBorder = new AxisBorder()
				{
					Show = false
				},
				Position = XAxisPosition.Bottom,
				Type = XAxisType.Category

			},
			Yaxis = new List<YAxis>()
			{

				new YAxis
				{
					AxisTicks = new AxisTicks()
					{
						Show = false
					},
					Show = false,
					SeriesName = "NetValue",
					DecimalsInFloat = 0,
				}
			},
			Legend = new Legend()
			{
				Position = LegendPosition.Bottom,
			}
		};

	public List<WealthOverviewEntry> Data { get; set; } = new List<WealthOverviewEntry>();

	protected override async Task OnInitializedAsync()
	{
		currency = settingsService.GetCurrency();
	}
	protected override async Task OnParametersSetAsync()
	{
		foreach (var dataEntry in Data)
			dataEntry.Value = 0;

		await GetData();
		StateHasChanged();

		if (chart is not null) await chart.UpdateSeriesAsync(true);
	}

	private async Task GetData()
	{
		await GetData<BankAccount, BankAccountEntry>(StartDateTime, DateTime.Now);
		await GetData<StockAccount, InvestmentEntry>(StartDateTime, DateTime.Now);

		TotalAssets = Data.Sum(x => x.Value);
	}
	private async Task GetData<T, T2>(DateTime start, DateTime end) where T : FinancialAccountBase<T2> where T2 : FinancialEntryBase
	{
		var financialAccounts = bankAccountRepository.GetAccounts<T>(StartDateTime, DateTime.Now);

		if (financialAccounts is null) return;

		foreach (T account in financialAccounts.Where(x => x.Entries is not null && x.Entries.Any() && x.Entries.First().Value >= 0))
		{
			switch (account)
			{
				case BankAccount bankAccount:
					GetDataFinancialAccount(bankAccount);
					break;

				case StockAccount stockAccount:
					await GetDataFinancialAccount(stockAccount);
					break;
			}
		}
	}
	private void GetDataFinancialAccount(BankAccount bankAccount)
	{
		if (bankAccount is null || bankAccount.Entries is null) return;

		var dataEntry = Data.FirstOrDefault(x => x.Cathegory == bankAccount.AccountType.ToString());

		if (dataEntry is not null)
		{
			dataEntry.Value += bankAccount.Entries.First().Value;
		}
		else
		{
			Data.Add(new WealthOverviewEntry()
				{
					Cathegory = bankAccount.AccountType.ToString(),
					Value = bankAccount.Entries.First().Value
				});
		}
	}
	private async Task GetDataFinancialAccount(StockAccount stockAccount)
	{
		if (stockAccount is null || stockAccount.Entries is null) return;

		foreach (var investmentType in stockAccount.GetStoredTypes())
		{
			var dataEntry = Data.FirstOrDefault(x => x.Cathegory == investmentType.ToString());

			var entry = stockAccount.Entries.First(x => x.InvestmentType == investmentType);

			if (entry.Value < 0)
			{
				if (dataEntry is not null)
					dataEntry.Value = 0;

				continue;
			}

			if (dataEntry is not null)
			{
				var price = await stockRepository.GetStockPrice(entry.Ticker, entry.PostingDate);
				dataEntry.Value += price.PricePerUnit * entry.Value;
			}
			else
			{
				var price = await stockRepository.GetStockPrice(entry.Ticker, entry.PostingDate);
				Data.Add(new WealthOverviewEntry()
					{
						Cathegory = investmentType.ToString(),
						Value = price.PricePerUnit * entry.Value
					});
			}
		}
	}

	public class WealthOverviewEntry
	{
		public string Cathegory;
		public decimal Value;
	}

}

