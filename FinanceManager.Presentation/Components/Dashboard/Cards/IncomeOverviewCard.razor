@using ApexCharts
@using FinanceManager.Core.Entities
@using FinanceManager.Core.Entities.Accounts
@using FinanceManager.Core.Repositories
@using FinanceManager.Core.Extensions
@using FinanceManager.Core.Services

@inject IFinancalAccountRepository bankAccountRepository;
@inject ISettingsService settingsService;


<div class="card" style="height:@Height;">
	<div class="card-body">
		<div class="container-fluid d-flex flex-column h-100">
			<div class="row">
				<div class="col px-0">
					<h5 class="card-title">Income</h5>
					<h6 class="card-subtitle mb-2 text-muted">@TotalIncome @currency</h6>
				</div>
			</div>

			<div class="row flex-fill" style="height:1px;">
				<div class="h-100">

					<ApexChart @ref="chart" TItem="SpendingOverviewEntry" Height="@("100%")" Options="options" XAxisType="XAxisType.Datetime">


						<ApexPointSeries TItem="SpendingOverviewEntry"
										 Items="Data"
										 Name="Income"
										 XValue="@(e => e.Date.ToLocalTime())"
										 YValue="e=> e.Value"
										 SeriesType="SeriesType.Area" />

					</ApexChart>
				</div>
			</div>
		</div>
	</div>
</div>




@code {
	private string currency = "";
	private ApexChart<SpendingOverviewEntry> chart;

	private ApexChartOptions<SpendingOverviewEntry> options { get; set; } = new();

	public List<SpendingOverviewEntry> Data { get; set; } = new List<SpendingOverviewEntry>();

	[Parameter]
	public string Height { get; set; } = "300px";

	[Parameter]
	public DateTime StartDateTime { get; set; }

	public decimal TotalIncome = 0;

	protected override async Task OnInitializedAsync()
	{
		currency = settingsService.GetCurrency();
		options.Chart = new Chart
			{
				Toolbar = new ApexCharts.Toolbar
				{
					Show = false
				},
				Zoom = new Zoom()
				{
					Enabled = false
				},
				Sparkline = new ChartSparkline()
				{
					Enabled = true,
				}
			};

		options.Xaxis = new XAxis()
			{
				AxisTicks = new AxisTicks()
				{
					Show = false,
				},
				AxisBorder = new AxisBorder()
				{
					Show = false
				},
				Position = XAxisPosition.Bottom,
				Type = XAxisType.Datetime

			};

		options.Yaxis = new List<YAxis>();

		options.Yaxis.Add(new YAxis
			{
				TickAmount = 2,
				AxisTicks = new AxisTicks()
				{
					Show = false
				},
				Show = false,
				SeriesName = "NetValue",
				DecimalsInFloat = 0,

			});


	}
	private async Task<List<SpendingOverviewEntry>> GetData()
	{
		var result = new List<SpendingOverviewEntry>();
		await Task.Run(() =>
		{
			var bankAccounts = bankAccountRepository.GetAccounts<BankAccount>(StartDateTime, DateTime.Now);
			if (bankAccounts is null) return;
			
			foreach (var account in bankAccounts.Where(x => x.Entries is not null && x.Entries.Any()))
			{
				List<BankAccountEntry> entries = new List<BankAccountEntry>();
				if ((DateTime.Now - StartDateTime).TotalDays > 6 * 31)
				{
					entries = account.Entries.GetEntriesMonthly();
				}
				else if ((DateTime.Now - StartDateTime).TotalDays > 31)
				{
					entries = account.Entries.GetEntriesWeekly();
				}
				else
				{
					entries = account.Entries;
				}

				foreach (var entry in entries.Where(x => x.ValueChange > 0))
				{
					var dataEntry = result.FirstOrDefault(x => x.Date == entry.PostingDate.Date);
					if (dataEntry is null)
					{
						result.Add(new SpendingOverviewEntry()
							{
								Date = entry.PostingDate.Date,
								Value = entry.ValueChange
							});
					}
					else
					{
						dataEntry.Value += entry.ValueChange;
					}

				}
			}
			TotalIncome = result.Sum(x => x.Value);
		});
		return result.OrderBy(x => x.Date).ToList();
	}

	protected override async Task OnParametersSetAsync()
	{
		Data.Clear();
		if (chart is not null) await chart.UpdateSeriesAsync(true);

		Data.AddRange(await GetData());

		if (chart is not null) await chart.UpdateSeriesAsync(true);
	}
	public class SpendingOverviewEntry
	{
		public DateTime Date;
		public decimal Value;
	}
}

