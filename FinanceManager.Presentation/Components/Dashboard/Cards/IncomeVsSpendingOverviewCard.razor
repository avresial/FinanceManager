@using ApexCharts
@using FinanceManager.Core.Entities
@using FinanceManager.Core.Repositories
@using FinanceManager.Core.Extensions

@inject IBankAccountRepository bankAccountRepository;


<div class="card" style="height:@Height;">
	<div class="card-body">
		<div class="container-fluid d-flex flex-column h-100">
			<div class="row">
				<div class="col px-0">
					<h5 class="card-title">Income & expenses</h5>
				</div>
			</div>

			<div class="row flex-fill" style="height:1px;">
				<div class="h-100">
					<ApexChart @ref="chart" Height="@("100%")" TItem="IncomeVsSpendingEntry" Options="options" XAxisType="XAxisType.Datetime">


						<ApexPointSeries TItem="IncomeVsSpendingEntry"
										 Items="Data"
										 Name="Income"
										 XValue="@(e => e.Date.ToLocalTime())"
										 YValue="e=> e.Income"
										 SeriesType="SeriesType.Area" />

						<ApexPointSeries TItem="IncomeVsSpendingEntry"
										 Items="Data"
										 Name="Spending"
										 XValue="@(e => e.Date.ToLocalTime())"
										 YValue="e=> e.Spending"
										 SeriesType="SeriesType.Area" />

					</ApexChart>
				</div>
			</div>
		</div>
	</div>
</div>




@code {

	string height = "100%";
	private ApexChart<IncomeVsSpendingEntry> chart;

	private ApexChartOptions<IncomeVsSpendingEntry> options { get; set; } = new()
		{
			Colors = new List<string> { "#00FF00", "#FF0000" },
			Fill = new Fill
			{
				Type = new List<FillType> { FillType.Gradient, FillType.Gradient },
				Gradient = new FillGradient
				{
					ShadeIntensity = 1,
					OpacityFrom = 0.2,
					OpacityTo = 0.9,

				},
			}

		};

	[Parameter]
	public string Height { get; set; } = "300px";

	[Parameter]
	public DateTime StartDateTime { get; set; }

	public List<IncomeVsSpendingEntry> Data { get; set; } = new List<IncomeVsSpendingEntry>();

	protected override async Task OnInitializedAsync()
	{
		options.Chart = new Chart
			{
				Toolbar = new ApexCharts.Toolbar
				{
					Show = false
				},
				Zoom = new Zoom()
				{
					Enabled = false
				}
			};


		options.Xaxis = new XAxis()
			{
				AxisTicks = new AxisTicks()
				{
					Show = false,
				},
				AxisBorder = new AxisBorder()
				{
					Show = false
				},
				Position = XAxisPosition.Bottom,
				Type = XAxisType.Datetime

			};

		options.Yaxis = new List<YAxis>();

		options.Yaxis.Add(new YAxis
			{
				AxisTicks = new AxisTicks()
				{
					Show = false
				},
				Show = false,
				SeriesName = "NetValue",
				DecimalsInFloat = 0,

			});

	}


	protected override async Task OnParametersSetAsync()
	{
		Data.Clear();
		Data.AddRange(await GetData());

		if (chart is not null) await chart.UpdateSeriesAsync(true);
	}

	private async Task<List<IncomeVsSpendingEntry>> GetData()
	{
		List<IncomeVsSpendingEntry> result = new List<IncomeVsSpendingEntry>();
		await Task.Run(() =>
		{
			var bankAccounts = bankAccountRepository.Get(StartDateTime, DateTime.Now).Where(x => x.Entries.Any());

			foreach (var account in bankAccounts)
			{
				List<BankAccountEntry> entries = new List<BankAccountEntry>();
				if ((DateTime.Now - StartDateTime).TotalDays > 6 * 31)
				{
					entries = account.Entries.GetEntriesMonthly();
				}
				else if ((DateTime.Now - StartDateTime).TotalDays > 31)
				{
					entries = account.Entries.GetEntriesWeekly();
				}
				else
				{
					entries = account.Entries;
				}

				foreach (var entry in entries)
				{
					var dataEntry = result.FirstOrDefault(x => x.Date == entry.PostingDate.Date);
					if (dataEntry is null)
					{
						var newDataEntry = new IncomeVsSpendingEntry() { Date = entry.PostingDate.Date };
						if (entry.BalanceChange < 0)
						{
							newDataEntry.Spending = -entry.BalanceChange;
						}
						else
						{
							newDataEntry.Income = entry.BalanceChange;
						}

						result.Add(newDataEntry);
					}
					else
					{
						if (entry.BalanceChange < 0)
						{
							dataEntry.Spending -= entry.BalanceChange;
						}
						else
						{
							dataEntry.Income += entry.BalanceChange;
						}
					}

				}
			}
		});

		result = result.OrderBy(x => x.Date).ToList();

		return result;
	}
	public class IncomeVsSpendingEntry
	{
		public DateTime Date;
		public decimal Income;
		public decimal Spending;
	}

}

