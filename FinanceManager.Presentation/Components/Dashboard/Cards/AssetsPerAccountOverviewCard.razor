@using ApexCharts
@using FinanceManager.Core.Entities
@using FinanceManager.Core.Entities.Accounts
@using FinanceManager.Core.Entities.MoneyFlowModels
@using FinanceManager.Core.Repositories
@using FinanceManager.Core.Services

@inject IMoneyFlowService moneyFlowService;
@inject IFinancalAccountRepository bankAccountRepository;
@inject ISettingsService settingsService;
@inject IStockRepository stockRepository;

<div class="card" style="height:@Height;">
    <div class="card-body">
        <div class="container-fluid d-flex flex-column h-100">
            <div class="row">
                <div class="col px-0">
                    <h5 class="card-title">Assets per wallet</h5>
                    @if (DisplayAsChart)
                    {
                        <h6 class="card-subtitle mb-2 text-muted">@Math.Round(TotalAssets, 2) @currency</h6>
                    }
                </div>
            </div>
            @if (DisplayAsChart)
            {
                <div class="row flex-fill" style="height:1px;">
                    <div class="h-100">

                        <ApexChart @ref="chart" Height="@("100%")" TItem="AssetsPerAcountEntry" Options="options">


                            <ApexPointSeries TItem="AssetsPerAcountEntry"
                                             Items="Data"
                                             Name="Assets"
                                             XValue="e => e.Cathegory.ToString()"
                                             YAggregate="@(e => e.Sum(e => Math.Round(e.Value,2)))"
                                             SeriesType="SeriesType.Pie"
                                             OrderByDescending="@(e=>e.Y.Value)" />

                        </ApexChart>
                    </div>
                </div>
            }
            else
            {
                <div class="row flex-fill overflow-auto" style="height:1px;">
                    <div class="h-100">
                        @foreach (var wealthCategory in Data)
                        {
                            <div class="row mb-2">
                                <div class="col">
                                    @wealthCategory.Cathegory
                                </div>

                                <div class="col-auto">
                                    @wealthCategory.Value.ToString("0.00") @currency
                                </div>
                            </div>
                        }

                        <hr class="mt-1 mb-1" />
                        <div class="row mb-2">
                            <div class="col">
                                Sum
                            </div>
                            @if (@TotalAssets < 0)
                            {
                                <div class="col-auto" style="color:red">
                                    @TotalAssets.ToString("0.00") @currency
                                </div>
                            }
                            else
                            {
                                <div class="col-auto" style="color:green">
                                    @TotalAssets.ToString("0.00") @currency
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

        </div>
    </div>
</div>




@code {
    private string currency = "";
    decimal TotalAssets = 0;
    [Parameter]
    public bool DisplayAsChart { get; set; } = true;

    [Parameter]
    public string Height { get; set; } = "300px";

    [Parameter]
    public DateTime StartDateTime { get; set; }

    private ApexChart<AssetsPerAcountEntry> chart;

    private ApexChartOptions<AssetsPerAcountEntry> options { get; set; } = new()
        {
            Chart = new Chart
            {
                Toolbar = new ApexCharts.Toolbar
                {
                    Show = false
                },
            },
            Xaxis = new XAxis()
            {
                AxisTicks = new AxisTicks()
                {
                    Show = false,
                },
                AxisBorder = new AxisBorder()
                {
                    Show = false
                },
                Position = XAxisPosition.Bottom,
                Type = XAxisType.Category

            },
            Yaxis = new List<YAxis>()
            {

                new YAxis
                {
                    AxisTicks = new AxisTicks()
                    {
                        Show = false
                    },
                    Show = false,
                    SeriesName = "NetValue",
                    DecimalsInFloat = 0,
                }
            },
            Legend = new Legend()
            {
                Position = LegendPosition.Bottom,
            }
        };

    public List<AssetsPerAcountEntry> Data { get; set; } = new List<AssetsPerAcountEntry>();


    protected override async Task OnInitializedAsync()
    {
        currency = settingsService.GetCurrency();
    }

    protected override async Task OnParametersSetAsync()
    {
        foreach (var dataEntry in Data)
            dataEntry.Value = 0;

        if (chart is not null) await chart.UpdateSeriesAsync(true);

        await GetData();

        StateHasChanged();

        if (chart is not null) await chart.UpdateSeriesAsync(true);

    }

    async Task GetData()
    {
        Data = await moneyFlowService.GetEndAssetsPerAcount(StartDateTime, DateTime.UtcNow);
        TotalAssets = Data.Sum(x => x.Value);
    }
}