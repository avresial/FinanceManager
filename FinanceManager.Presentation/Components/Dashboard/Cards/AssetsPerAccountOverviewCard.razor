@using ApexCharts
@using FinanceManager.Core.Entities
@using FinanceManager.Core.Entities.Accounts
@using FinanceManager.Core.Repositories
@using FinanceManager.Core.Services

@inject IFinancalAccountRepository bankAccountRepository;
@inject ISettingsService settingsService;
@inject IStockRepository stockRepository;

<div class="card" style="height:@Height;">
    <div class="card-body">
        <div class="container-fluid d-flex flex-column h-100">
            <div class="row">
                <div class="col px-0">
                    <h5 class="card-title">Assets per account</h5>
                    @if (DisplayAsChart)
                    {
                        <h6 class="card-subtitle mb-2 text-muted">@Math.Round(TotalAssets, 2) @currency</h6>
                    }
                </div>
            </div>
            @if (DisplayAsChart)
            {
                <div class="row flex-fill" style="height:1px;">
                    <div class="h-100">

                        <ApexChart @ref="chart" Height="@("100%")" TItem="WealthOverviewEntry" Options="options">


                            <ApexPointSeries TItem="WealthOverviewEntry"
                                             Items="Data"
                                             Name="Assets"
                                             XValue="e => e.Cathegory.ToString()"
                                             YAggregate="@(e => e.Sum(e => Math.Round(e.Value,2)))"
                                             SeriesType="SeriesType.Pie"
                                             OrderByDescending="@(e=>e.Y.Value)" />

                        </ApexChart>
                    </div>
                </div>
            }
            else
            {
                <div class="row flex-fill overflow-auto" style="height:1px;">
                    <div class="h-100">
                        @foreach (var wealthCategory in Data)
                        {
                            <div class="row mb-2">
                                <div class="col">
                                    @wealthCategory.Cathegory
                                </div>

                                <div class="col-auto">
                                    @wealthCategory.Value.ToString("0.00") @currency
                                </div>
                            </div>
                        }

                        <hr class="mt-1 mb-1" />
                        <div class="row mb-2">
                            <div class="col">
                                Sum
                            </div>
                            @if (@TotalAssets < 0)
                            {
                                <div class="col-auto" style="color:red">
                                    @TotalAssets.ToString("0.00") @currency
                                </div>
                            }
                            else
                            {
                                <div class="col-auto" style="color:green">
                                    @TotalAssets.ToString("0.00") @currency
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

        </div>
    </div>
</div>




@code {
    private string currency = "";
    decimal TotalAssets = 0;
    [Parameter]
    public bool DisplayAsChart { get; set; } = true;

    [Parameter]
    public string Height { get; set; } = "300px";

    [Parameter]
    public DateTime StartDateTime { get; set; }

    private ApexChart<WealthOverviewEntry> chart;

    private ApexChartOptions<WealthOverviewEntry> options { get; set; } = new()
        {
            Chart = new Chart
            {
                Toolbar = new ApexCharts.Toolbar
                {
                    Show = false
                },
            },
            Xaxis = new XAxis()
            {
                AxisTicks = new AxisTicks()
                {
                    Show = false,
                },
                AxisBorder = new AxisBorder()
                {
                    Show = false
                },
                Position = XAxisPosition.Bottom,
                Type = XAxisType.Category

            },
            Yaxis = new List<YAxis>()
            {

                new YAxis
                {
                    AxisTicks = new AxisTicks()
                    {
                        Show = false
                    },
                    Show = false,
                    SeriesName = "NetValue",
                    DecimalsInFloat = 0,
                }
            },
            Legend = new Legend()
            {
                Position = LegendPosition.Bottom,
            }
        };

    public List<WealthOverviewEntry> Data { get; set; } = new List<WealthOverviewEntry>();


    protected override async Task OnInitializedAsync()
    {
        currency = settingsService.GetCurrency();
    }


    protected override async Task OnParametersSetAsync()
    {
        foreach (var dataEntry in Data)
            dataEntry.Value = 0;

        if (chart is not null) await chart.UpdateSeriesAsync(true);

        await GetData();

        StateHasChanged();

        if (chart is not null) await chart.UpdateSeriesAsync(true);

    }

    async Task GetData()
    {
        await GetData<BankAccount, BankAccountEntry>(StartDateTime, DateTime.Now);
        await GetData<StockAccount, InvestmentEntry>(StartDateTime, DateTime.Now);

        TotalAssets = Data.Sum(x => x.Value);
    }
    private async Task GetData<T, T2>(DateTime start, DateTime end) where T : FinancialAccountBase<T2> where T2 : FinancialEntryBase
    {
        var financialAccounts = bankAccountRepository.GetAccounts<T>(StartDateTime, DateTime.Now);

        if (financialAccounts is null) return;

        foreach (T account in financialAccounts.Where(x => x.Entries is not null && x.Entries.Any() && x.Entries.First().Value >= 0))
        {
            switch (account)
            {
                case BankAccount bankAccount:
                    GetDataFinancialAccount(bankAccount);
                    break;

                case StockAccount stockAccount:
                    await GetDataFinancialAccount(stockAccount);
                    break;
            }
        }
    }
    private void GetDataFinancialAccount(BankAccount bankAccount)
    {
        if (bankAccount is null || bankAccount.Entries is null) return;

        var dataEntry = Data.FirstOrDefault(x => x.Cathegory == bankAccount.Name);

        if (dataEntry is not null)
        {
            dataEntry.Value += bankAccount.Entries.First().Value;
        }
        else
        {
            Data.Add(new WealthOverviewEntry()
                {
                    Cathegory = bankAccount.Name,
                    Value = bankAccount.Entries.First().Value
                });
        }
    }
    private async Task GetDataFinancialAccount(StockAccount stockAccount)
    {
        if (stockAccount is null || stockAccount.Entries is null) return;

        foreach (var ticker in stockAccount.GetStoredTickers())
        {
            var dataEntry = Data.FirstOrDefault(x => x.Cathegory == stockAccount.Name);

            var entry = stockAccount.Entries.First(x => x.Ticker == ticker);

            if (entry.Value < 0)
            {
                if (dataEntry is not null)
                    dataEntry.Value = 0;

                continue;
            }

            if (dataEntry is not null)
            {
                var price = await stockRepository.GetStockPrice(entry.Ticker, entry.PostingDate);
                dataEntry.Value += price.PricePerUnit * entry.Value;
            }
            else
            {
                var price = await stockRepository.GetStockPrice(entry.Ticker, entry.PostingDate);
                Data.Add(new WealthOverviewEntry()
                    {
                        Cathegory = stockAccount.Name,
                        Value = price.PricePerUnit * entry.Value
                    });
            }
        }
    }
    public class WealthOverviewEntry
    {
        public string Cathegory;
        public decimal Value;
    }

}