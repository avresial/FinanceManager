@using FinanceManager.Core.Entities
@using FinanceManager.Core.Entities.Accounts
@using FinanceManager.Core.Enums
@using FinanceManager.Core.Repositories
@using FinanceManager.Core.Services

@inject IFinancalAccountRepository bankAccountRepository;
@inject ISettingsService settingsService;

<div class="card" style="height:@Height;">
	<div class="card-body">
		<h5 class="card-title">Spending</h5>
		<ul class="list-group list-group-flush">
			@foreach (var entry in Data)
			{
				<li class="list-group-item">
					@* <i class="bi bi-house"></i>  *@
					@entry.ExpenseType - @entry.Value @currency
				</li>
			}
		</ul>
	</div>
</div>

@code
{
	private string currency = "";

	[Parameter]
	public string Height { get; set; } = "300px";

	[Parameter]
	public DateTime StartDateTime { get; set; }

	List<SpendingCathegoryOverviewEntry> Data = new List<SpendingCathegoryOverviewEntry>();
	protected override async Task OnInitializedAsync()
	{
		currency = settingsService.GetCurrency();

	}

	protected override async Task OnParametersSetAsync()
	{
		Data.Clear();

		await Task.Run(() =>
		{
			var bankAccounts = bankAccountRepository.GetAccounts<BankAccount>(StartDateTime, DateTime.Now);
			if (bankAccounts is null) return;
		
			foreach (var account in bankAccounts.Where(x => x.Entries is not null && x.Entries.Any()))
			{
				foreach (var entry in account.Entries.Where(x => x.ValueChange < 0))
				{
					var key = entry.ExpenseType.ToString();
					var entryElement = Data.FirstOrDefault(x => x.ExpenseType == entry.ExpenseType);

					if (entryElement is not null)
					{
						entryElement.Value += -entry.ValueChange;
					}
					else
					{
						Data.Add(new SpendingCathegoryOverviewEntry() { ExpenseType = entry.ExpenseType, Value = -entry.ValueChange });
					}
				}
			}

			Data = Data.OrderByDescending(x => x.Value).ToList();
		});
	}

	private class SpendingCathegoryOverviewEntry
	{
		public ExpenseType ExpenseType { get; set; }
		public decimal Value { get; set; }
	}

}