@using ApexCharts
@using FinanceManager.Core.Repositories
@using FinanceManager.Core.Services

@inject IBankAccountRepository bankAccountRepository;
@inject ISettingsService settingsService;

<div class="card" style="height:@Height;">
	<div class="card-body">

		<div class="container-fluid d-flex flex-column h-100">
			<div class="row">
				<div class="col px-0">
					<h5 class="card-title">Spendings</h5>
					<h6 class="card-subtitle mb-2 text-muted">@TotalSpending @currency</h6>
				</div>
			</div>

			<div class="row flex-fill" style="height:1px;">
				<div class="h-100">
					@if (!Data.Any())
					{
						<ChartSpinner></ChartSpinner>
					}
					else
					{

						<ApexChart @ref="chart" TItem="SpendingOverviewEntry" Height="@("100%")" Options="options">


							<ApexPointSeries TItem="SpendingOverviewEntry"
											 Items="Data"
											 Name="Spending"
											 XValue="@(e => e.Date)"
											 YValue="e=> e.Value"
											 SeriesType="SeriesType.Line" />

						</ApexChart>
					}
				</div>
			</div>
		</div>
	</div>
</div>




@code {
	private string currency = "";
	private ApexChart<SpendingOverviewEntry> chart = new ApexChart<SpendingOverviewEntry>();

	private ApexChartOptions<SpendingOverviewEntry> options { get; set; } = new();

	[Parameter]
	public List<SpendingOverviewEntry> Data { get; set; } = new List<SpendingOverviewEntry>();

	[Parameter]
	public DateTime StartDateTime { get; set; }

	[Parameter]
	public string Height { get; set; } = "300px";

	public decimal TotalSpending = 0;
	protected override async Task OnParametersSetAsync()
	{
		Data.Clear();
		if (chart is not null) await chart.UpdateSeriesAsync(true);
		await Task.Run(() =>
		{
			var bankAccounts = bankAccountRepository.Get(StartDateTime, DateTime.Now).Where(x => x.Entries.Any());

			foreach (var account in bankAccounts)
			{
				foreach (var entry in account.Entries.Where(x => x.BalanceChange < 0))
				{
					var dataEntry = Data.FirstOrDefault(x => x.Date == entry.PostingDate.Date);
					if (dataEntry is null)
					{
						Data.Add(new SpendingOverviewEntry()
							{
								Date = entry.PostingDate.Date,
								Value = -entry.BalanceChange
							});
					}
					else
					{
						dataEntry.Value += entry.BalanceChange;
					}

				}
			}

			Data = Data.OrderBy(x => x.Date).ToList();
			TotalSpending = Data.Sum(x => x.Value);
		});

		if (chart is not null) await chart.UpdateSeriesAsync(true);
	}
	protected override async Task OnInitializedAsync()
	{
		currency = settingsService.GetCurrency();
		options.Chart = new Chart
			{
				Toolbar = new ApexCharts.Toolbar
				{
					Show = false
				},

			};


		options.Xaxis = new XAxis()
			{
				AxisTicks = new AxisTicks()
				{
					Show = false,
				},
				AxisBorder = new AxisBorder()
				{
					Show = false
				},
				Position = XAxisPosition.Bottom,
				Type = XAxisType.Datetime

			};

		options.Yaxis = new List<YAxis>();

		options.Yaxis.Add(new YAxis
			{
				AxisTicks = new AxisTicks()
				{
					Show = false
				},
				Show = false,
				SeriesName = "NetValue",
				DecimalsInFloat = 0,

			});



	}
	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
	}

	public class SpendingOverviewEntry
	{
		public DateTime Date;
		public decimal Value;
	}

}

