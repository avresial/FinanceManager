@using ApexCharts
@using FinanceManager.Core.Repositories

@inject IBankAccountRepository bankAccountRepository;

<div class="card">
	<div class="card-body">
		<h5 class="card-title">Spendings</h5>
		<h6 class="card-subtitle mb-2 text-muted">$99</h6>
		@if (!Data.Any())
		{
			<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; display: block; max-height: 250px;" width="100%" height="100%" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
				<g transform="rotate(180 50 50)">
					<rect x="15" y="15" width="10" height="40" fill="#ebebeb">
						<animate attributeName="height" values="50;70;30;50" keyTimes="0;0.33;0.66;1" dur="1s" repeatCount="indefinite" calcMode="spline" keySplines="0.5 0 0.5 1;0.5 0 0.5 1;0.5 0 0.5 1" begin="-0.4s"></animate>
					</rect>
					<rect x="35" y="15" width="10" height="40" fill="#f0f0f0">
						<animate attributeName="height" values="50;70;30;50" keyTimes="0;0.33;0.66;1" dur="1s" repeatCount="indefinite" calcMode="spline" keySplines="0.5 0 0.5 1;0.5 0 0.5 1;0.5 0 0.5 1" begin="-0.2s"></animate>
					</rect>
					<rect x="55" y="15" width="10" height="40" fill="#ebebeb">
						<animate attributeName="height" values="50;70;30;50" keyTimes="0;0.33;0.66;1" dur="1s" repeatCount="indefinite" calcMode="spline" keySplines="0.5 0 0.5 1;0.5 0 0.5 1;0.5 0 0.5 1" begin="-0.6s"></animate>
					</rect>
					<rect x="75" y="15" width="10" height="40" fill="#f0f0f0">
						<animate attributeName="height" values="50;70;30;50" keyTimes="0;0.33;0.66;1" dur="1s" repeatCount="indefinite" calcMode="spline" keySplines="0.5 0 0.5 1;0.5 0 0.5 1;0.5 0 0.5 1" begin="-1s"></animate>
					</rect>
				</g>
			</svg>
		}
		else
		{

			<ApexChart @ref="chart" TItem="SpendingOverviewEntry" Height="100" Options="options">


				<ApexPointSeries TItem="SpendingOverviewEntry"
								 Items="Data"
								 Name="Spending"
								 XValue="@(e => e.Date)"
								 YValue="e=> e.Value"
								 SeriesType="SeriesType.Line" />

			</ApexChart>
		}
	</div>
</div>




@code {
	private ApexChart<SpendingOverviewEntry> chart = new ApexChart<SpendingOverviewEntry>();

	private ApexChartOptions<SpendingOverviewEntry> options { get; set; } = new();

	[Parameter]
	public List<SpendingOverviewEntry> Data { get; set; } = new List<SpendingOverviewEntry>();

	protected override async Task OnInitializedAsync()
	{
		options.Chart = new Chart
			{
				Toolbar = new ApexCharts.Toolbar
				{
					Show = false
				},

			};


		options.Xaxis = new XAxis()
			{
				AxisTicks = new AxisTicks()
				{
					Show = false,
				},
				AxisBorder = new AxisBorder()
				{
					Show = false
				},
				Position = XAxisPosition.Bottom,
				Type = XAxisType.Datetime

			};

		options.Yaxis = new List<YAxis>();

		options.Yaxis.Add(new YAxis
			{
				AxisTicks = new AxisTicks()
				{
					Show = false
				},
				Show = false,
				SeriesName = "NetValue",
				DecimalsInFloat = 0,

			});
		await chart.UpdateSeriesAsync(false);

		await Task.Run(() =>
		{
			var bankAccounts = bankAccountRepository.Get().Where(x => x.Entries.Any());

			foreach (var account in bankAccounts)
			{
				foreach (var entry in account.Entries.Where(x => x.BalanceChange < 0))
				{
					var dataEntry = Data.FirstOrDefault(x => x.Date == entry.PostingDate.Date);
					if (dataEntry is null)
					{
						Data.Add(new SpendingOverviewEntry()
							{
								Date = entry.PostingDate.Date,
								Value = entry.BalanceChange
							});
					}
					else
					{
						dataEntry.Value += entry.BalanceChange;
					}

				}
			}

			Data = Data.OrderBy(x => x.Date).ToList();
		});
	}
	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
	}

	// protected override async Task OnParametersSetAsync()
	// {
	// 	if (chart is null) return;

	// 	await chart?.UpdateSeriesAsync(true);
	// }

	public class SpendingOverviewEntry
	{
		public DateTime Date;
		public decimal Value;
	}

}

