@using ApexCharts
@using FinanceManager.Core.Entities
@using FinanceManager.Core.Entities.Accounts
@using FinanceManager.Core.Providers
@using FinanceManager.Core.Repositories
@using FinanceManager.Core.Extensions
@using FinanceManager.Core.Services
@using FinanceManager.Components.Helpers

@inject IFinancalAccountRepository bankAccountRepository;
@inject ISettingsService settingsService;

<div class="card" style="height:@Height;">
    <div class="row m-0">
        <div class="card-body">
            <div class="container-fluid d-flex flex-column h-100 px-1">
                <div class="col px-0">
                    <h5 class="card-title">Spendings</h5>
                    <h6 class="card-subtitle mb-2 text-muted">@TotalSpending @currency</h6>
                </div>
            </div>
        </div>
    </div>
    <div class="row flex-fill" style="height:1px;">
        <div class="h-100" style="position:relative; bottom:-2px">
            @if (!Data.Any())
            {
                <ChartSpinner></ChartSpinner>
            }
            else
            {
                <ApexChart @ref="chart" TItem="SpendingOverviewEntry" Height="@("100%")" Options="options" XAxisType="XAxisType.Datetime">
                    <ApexPointSeries TItem="SpendingOverviewEntry"
                                     Items="Data"
                                     Name="Spending"
                                     XValue="@(e => e.Date.ToLocalTime())"
                                     YValue="e=> e.Value"
                                     SeriesType="SeriesType.Area" />
                </ApexChart>
            }
        </div>
    </div>

</div>



@code {
    private string currency = "";
    private ApexChart<SpendingOverviewEntry> chart = new ApexChart<SpendingOverviewEntry>();

    private ApexChartOptions<SpendingOverviewEntry> options { get; set; } = new();

    [Parameter]
    public List<SpendingOverviewEntry> Data { get; set; } = new List<SpendingOverviewEntry>();

    [Parameter]
    public DateTime StartDateTime { get; set; }

    [Parameter]
    public string Height { get; set; } = "300px";

    public decimal TotalSpending = 0;
    protected override async Task OnParametersSetAsync()
    {
        Data.Clear();
        if (chart is not null) await chart.UpdateSeriesAsync(true);
        await Task.Run(() =>
        {
            List<BankAccount> bankAccounts = bankAccountRepository.GetAccounts<BankAccount>(StartDateTime, DateTime.Now)
            .Where(x => x.Entries is not null && x.Entries.Any())
            .ToList();

            if (bankAccounts is null) return;

            foreach (var account in bankAccounts)
            {
                if (account.Entries is null) continue;
                List<FinancialEntryBase> entries = account.Entries.Where(x => x.ValueChange < 0).Select(x => x as FinancialEntryBase).ToList();
                if ((DateTime.Now - StartDateTime).TotalDays > 6 * 31)
                {
                    entries = entries.GetEntriesMonthlyValue();
                }
                else if ((DateTime.Now - StartDateTime).TotalDays > 31)
                {
                    entries = entries.GetEntriesWeekly();
                }

                foreach (var entry in entries)
                {
                    var dataEntry = Data.FirstOrDefault(x => x.Date == entry.PostingDate.Date);
                    if (dataEntry is null)
                    {
                        var newDatapoint = new SpendingOverviewEntry()
                            {
                                Date = entry.PostingDate.Date,
                                Value = -entry.ValueChange
                            };
                        Data.Add(newDatapoint);
                    }
                    else
                    {
                        dataEntry.Value += -entry.ValueChange;
                    }
                }
                Console.WriteLine("WARNING - If there is gap in data, there will be a gap in chart as well. Add missing days, weeks or months.");
            }

            Data = Data.OrderBy(x => x.Date).ToList();
            TotalSpending = Data.Sum(x => x.Value);
        });

        if (chart is not null) await chart.UpdateSeriesAsync(true);
    }
    protected override void OnInitialized()
    {
        currency = settingsService.GetCurrency();
        options.Chart = new Chart
            {
                Toolbar = new ApexCharts.Toolbar
                {
                    Show = false
                },
                Zoom = new Zoom()
                {
                    Enabled = false
                },
                Sparkline = new ChartSparkline()
                {
                    Enabled = true,
                },

            };

        options.Xaxis = new XAxis()
            {
                AxisTicks = new AxisTicks()
                {
                    Show = false,
                },
                AxisBorder = new AxisBorder()
                {
                    Show = false
                },
                Position = XAxisPosition.Bottom,
                Type = XAxisType.Datetime

            };

        options.Yaxis = new List<YAxis>();

        options.Yaxis.Add(new YAxis
            {
                AxisTicks = new AxisTicks()
                {
                    Show = false
                },
                Show = false,
                SeriesName = "NetValue",
                DecimalsInFloat = 0,

            });

        options.Tooltip = new ApexCharts.Tooltip
            {
                Y = new TooltipY
                {
                    Formatter = ChartHelper.GetCurrencyFormatter(settingsService.GetCurrency())
                }
            };
        options.Colors = new List<string>
            {
               ColorsProvider.GetColors().First()
            };

    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    public class SpendingOverviewEntry
    {
        public DateTime Date;
        public decimal Value;
    }

}

