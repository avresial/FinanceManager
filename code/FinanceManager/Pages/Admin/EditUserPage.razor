@page "/Admin/EditUser/{UserId:int}"
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout

@using FinanceManager.Domain.Entities.Login
@using FinanceManager.Domain.Enums
@using FinanceManager.Domain.Services
@using FinanceManager.WebUi.Pages.User
@using Microsoft.AspNetCore.Authorization
@using System.Text.RegularExpressions

@if (_userData is not null)
{

    <MudGrid Spacing="6">
        <MudItem xs="12">
            <MudText Typo="Typo.h3">
                @_userData.Login.ToUpper()
            </MudText>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.h6">Change Password</MudText>
            <MudForm @ref="_passwordForm" @bind-IsValid="@_success" Spacing="3">

                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="_passwordField"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required
                              RequiredError="Password is required!" />

                <MudTextField T="string" @bind-Value="_confirmPassword" Immediate Required
                              Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                              Validation="@(new Func<string, string?>(PasswordMatch))" />

                <MudButton Variant="Variant.Text" Color="Color.Primary" Class="mt-4" OnClick="ChangePasswordAsync" Disabled="@(!_success)">Update Password</MudButton>
            </MudForm>

            <MudDivider Class="my-3" />
        </MudItem>

        @if (_userData.UserRole != UserRole.Admin)
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h6">Change pricing plan</MudText>
                <MudGrid>
                    <MudItem xs="8">
                        <MudSelect T="string" Label="Select Plan" @bind-Value="_selectedPlan">
                            @foreach (var plan in _plans)
                            {
                                <MudSelectItem Value="@plan">@plan</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="4">
                        <MudButton @onclick=UpgradePricingPlan Variant="Variant.Text" Color="Color.Primary" Class="mt-4" FullWidth Disabled=@(_userData?.PricingLevel.ToString() == _selectedPlan )>Upgrade Plan</MudButton>
                    </MudItem>
                </MudGrid>
                <MudDivider Class="my-3" />
            </MudItem>
        }

        <MudItem xs="12">
            <MudText Typo="Typo.h6">Change role</MudText>
            <MudGrid>
                <MudItem xs="8">
                    <MudSelect T="string" Label="Select role" @bind-Value="_selectedUserRole">
                        @foreach (var plan in _roles)
                        {
                            <MudSelectItem Value="@plan">@plan</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudButton @onclick=ChangeUserRole Variant="Variant.Text" Color="Color.Primary" Class="mt-4" FullWidth Disabled=@(_userData?.UserRole.ToString() == _selectedUserRole )>Change role</MudButton>
                </MudItem>
            </MudGrid>
            <MudDivider Class="my-3" />
        </MudItem>

        <MudItem xs="12">
            <MudStack Spacing="2">

                @foreach (var message in _errors)
                {
                    <MudAlert Severity="Severity.Error">@message</MudAlert>
                }

                @foreach (var message in _warnings)
                {
                    <MudAlert Severity="Severity.Warning">@message</MudAlert>
                }

                @foreach (var message in _info)
                {
                    <MudAlert Severity="Severity.Info">@message</MudAlert>
                }
            </MudStack>
        </MudItem>
    </MudGrid>
}
else if (_isLoadingPage)
{

}
else
{

    <MudAlert Severity="Severity.Error">User of id @UserId could not be found.</MudAlert>
}

@code
{
    private readonly List<string> _errors = [];
    private readonly List<string> _warnings = [];
    private readonly List<string> _info = [];

    private Domain.Entities.Login.User? _userData;

    private bool _isLoadingPage;
    private bool _success;
    private string _selectedPlan = $"{PricingLevel.Free}";
    private string _selectedUserRole;
    private string? _confirmPassword { get; set; }
    private string? _deleteConfirmation;
    private MudForm? _passwordForm;
    private MudTextField<string>? _passwordField;
    private List<string> _plans = new() { $"{PricingLevel.Free}", $"{PricingLevel.Basic}", $"{PricingLevel.Premium}" };
    private List<string> _roles = new() { $"{UserRole.User}", $"{UserRole.Admin}" };
    private RecordCapacity? _recordCapacity;

    [Parameter] public required int UserId { get; set; }

    [Inject] public required IUserService UserService { get; set; }
    [Inject] public required ILoginService LoginService { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _isLoadingPage = true;

        try
        {
            _userData = await UserService.GetUser(UserId);
            _selectedUserRole = _userData?.UserRole.ToString() ?? $"{UserRole.User}";
        }
        catch (Exception ex)
        {
        }

        _isLoadingPage = false;
    }

    private string PasswordMatch(string arg)
    {
        if (_passwordField is not null && _passwordField.Value != arg)
            return "Passwords don't match";

        return "";
    }
    private static IEnumerable<string> PasswordStrength(string pw)
    {

        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }

#if DEBUG

        yield break;
#endif

        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }


    private async Task ChangeUserRole()
    {
        if (_userData is null) return;

        try
        {
            var result = await UserService.UpdateRole(_userData.UserId, (UserRole)Enum.Parse(typeof(UserRole), _selectedUserRole));
            if (!result)
            {
                _errors.Insert(0, "Failed to change role.");
            }
            else
            {
                _info.Insert(0, $"Successfully changed role");
            }
        }
        catch (Exception ex)
        {
            _errors.Insert(0, "Failed to change role.");
            return;
        }
    }
    private async Task UpgradePricingPlan()
    {
        if (_userData is null) return;

        bool result = false;
        try
        {
            result = await UserService.UpdatePricingPlan(_userData.UserId, (PricingLevel)Enum.Parse(typeof(PricingLevel), _selectedPlan));
        }
        catch (Exception ex)
        {
            _errors.Insert(0, "Failed to change plan.");
            return;
        }

        _errors.Clear();
        if (!result)
        {
            _errors.Insert(0, "Failed to change plan.");
        }
        else
        {
            _info.Insert(0, $"Successfully upgraded plan to {_selectedPlan}");

            _userData = await UserService.GetUser(_userData.UserId);
            if (_userData is null) return;

            try
            {
                _recordCapacity = await UserService.GetRecordCapacity(_userData.UserId);
            }
            catch (Exception ex)
            {
                _errors.Insert(0, ex.Message);
            }
        }

    }

    private async Task ChangePasswordAsync()
    {
        if (_userData is null) return;
        if (_passwordField is null) return;
        if (string.IsNullOrEmpty(_confirmPassword)) return;

        await _passwordForm.Validate();
        if (_passwordForm.IsValid)
        {
            if (_passwordField.Value != _confirmPassword)
            {
                _warnings.Insert(0, "New passwords do not match.");
                return;
            }
            else
            {
                var result = await UserService.UpdatePassword(_userData.UserId, _confirmPassword);
                if (!result)
                {
                    _errors.Insert(0, "Failed to change password.");
                    return;
                }
                else
                {
                    _errors.Clear();
                    _info.Insert(0, "Password changed successfully.");
                }
            }
        }
        _confirmPassword = "";
    }
}