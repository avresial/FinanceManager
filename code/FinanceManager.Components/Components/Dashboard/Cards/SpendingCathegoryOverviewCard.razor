@using FinanceManager.Domain.Entities
@using FinanceManager.Domain.Entities.Accounts
@using FinanceManager.Domain.Enums
@using FinanceManager.Domain.Repositories
@using FinanceManager.Domain.Services

@inject IFinancalAccountRepository bankAccountRepository;
@inject ISettingsService settingsService;

<div class="card" style="height:@Height;">
    <div class="card-body">
        <h5 class="card-title">Spending</h5>
        <ul class="list-group list-group-flush">
            @foreach (var entry in Data)
            {
                <li class="list-group-item">
                    @entry.ExpenseType - @entry.Value @currency
                </li>
            }
        </ul>
    </div>
</div>

@code
{
    private string currency = string.Empty;
    private List<SpendingCathegoryOverviewEntry> Data = new();

    [Parameter]
    public string Height { get; set; } = "300px";

    [Parameter]
    public DateTime StartDateTime { get; set; }

    protected override void OnInitialized()
    {
        currency = settingsService.GetCurrency();
    }

    protected override async Task OnParametersSetAsync()
    {
        Data.Clear();

        await Task.Run(() =>
        {
            var bankAccounts = bankAccountRepository.GetAccounts<BankAccount>(StartDateTime, DateTime.Now);
            if (bankAccounts is null) return;

            foreach (var account in bankAccounts)
            {
                if (account.Entries is null || !account.Entries.Any()) continue;
                foreach (var entry in account.Entries.Where(x => x.ValueChange < 0))
                {
                    var key = entry.ExpenseType.ToString();
                    var entryElement = Data.FirstOrDefault(x => x.ExpenseType == entry.ExpenseType);

                    if (entryElement is not null)
                    {
                        entryElement.Value += -entry.ValueChange;
                    }
                    else
                    {
                        Data.Add(new SpendingCathegoryOverviewEntry() { ExpenseType = entry.ExpenseType, Value = -entry.ValueChange });
                    }
                }
            }

            Data = Data.OrderByDescending(x => x.Value).ToList();
        });
    }

    private class SpendingCathegoryOverviewEntry
    {
        public ExpenseType ExpenseType { get; set; }
        public decimal Value { get; set; }
    }

}