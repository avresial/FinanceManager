@using ApexCharts
@using FinanceManager.Domain.Entities
@using FinanceManager.Domain.Entities.Accounts
@using FinanceManager.Domain.Entities.MoneyFlowModels
@using FinanceManager.Domain.Enums
@using FinanceManager.Domain.Providers
@using FinanceManager.Domain.Repositories
@using FinanceManager.Domain.Services
@using FinanceManager.Components.Helpers

@inject IMoneyFlowService moneyFlowService;
@inject IFinancalAccountRepository bankAccountRepository;
@inject ISettingsService settingsService;
@inject IStockRepository stockRepository;

<div class="card" style="height:@Height;">
    <div class="row m-0">
        <div class="card-body">
            <div class="container-fluid d-flex flex-column h-100 px-1">
                <div class="col px-0">
                    <h5 class="card-title">Assets per type</h5>
                    <h6 class="card-subtitle mb-2 text-muted">@Math.Round(TotalAssets, 2) @currency</h6>
                </div>
            </div>
        </div>
    </div>

    <div class="row flex-fill pb-2" style="height:1px;">
        <div class="h-100" style="position:relative; bottom:-2px">
            <ApexChart @ref="chart" Height="@("100%")" TItem="AssetEntry" Options="options">
                <ApexPointSeries TItem="AssetEntry"
                Items="Data"
                Name="Assets"
                XValue="e => e.Name"
                YAggregate="@(e =>Math.Round( e.Sum(e => e.Value),2))"
                SeriesType="SeriesType.Pie"
                OrderByDescending="@(e=>e.Y)" />
            </ApexChart>
        </div>
    </div>
</div>




@code {
    private string currency = "";
    private decimal TotalAssets = 0;

    [Parameter]
    public string Height { get; set; } = "300px";

    [Parameter]
    public DateTime StartDateTime { get; set; }

    private ApexChart<AssetEntry>? chart;



    public List<AssetEntry> Data { get; set; } = new List<AssetEntry>();

    protected override async Task OnInitializedAsync()
    {
        options.Tooltip = new ApexCharts.Tooltip
            {
                Y = new TooltipY
                {
                    Formatter = ChartHelper.GetCurrencyFormatter(settingsService.GetCurrency())
                }
            };

        currency = settingsService.GetCurrency();

        await Task.CompletedTask;
    }
    protected override async Task OnParametersSetAsync()
    {
        foreach (var dataEntry in Data)
            dataEntry.Value = 0;

        await GetData();
        StateHasChanged();

        if (chart is not null) await chart.UpdateSeriesAsync(true);
    }

    private async Task GetData()
    {
        if (StartDateTime == new DateTime())
        {
            Data.Clear();
            TotalAssets = 0;
            return;
        }
        Data = await moneyFlowService.GetEndAssetsPerType(StartDateTime, DateTime.Now);
        TotalAssets = Data.Sum(x => x.Value);
    }

    private ApexChartOptions<AssetEntry> options { get; set; } = new()
        {
            Chart = new Chart
            {
                Toolbar = new ApexCharts.Toolbar
                {
                    Show = false
                },
            },
            Xaxis = new XAxis()
            {
                AxisTicks = new AxisTicks()
                {
                    Show = false,
                },
                AxisBorder = new AxisBorder()
                {
                    Show = false
                },
                Position = XAxisPosition.Bottom,
                Type = XAxisType.Category

            },
            Yaxis = new List<YAxis>()
            {

                new YAxis
                {
                    AxisTicks = new AxisTicks()
                    {
                        Show = false
                    },
                    Show = false,
                    SeriesName = "NetValue",
                    DecimalsInFloat = 0,
                }
            },
            Legend = new Legend()
            {
                Position = LegendPosition.Bottom,
            },
            Colors = ColorsProvider.GetColors()
        };
}