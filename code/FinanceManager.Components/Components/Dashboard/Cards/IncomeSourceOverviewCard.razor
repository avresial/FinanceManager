@using ApexCharts
@using FinanceManager.Domain.Entities.Accounts
@using FinanceManager.Domain.Extensions
@using FinanceManager.Domain.Entities
@using FinanceManager.Domain.Repositories
@using FinanceManager.Domain.Repositories.Account
@using FinanceManager.Domain.Services
@using FinanceManager.Components.Helpers

@inject IFinancalAccountRepository bankAccountRepository;
@inject ISettingsService settingsService;


<div class="card" style="height:@Height;">
	<div class="card-body">
		<div class="container-fluid d-flex flex-column h-100">
			<div class="row">
				<div class="col px-0">
					<h5 class="card-title">Income source</h5>
					<h6 class="card-subtitle mb-2 text-muted">@Total @currency</h6>
				</div>
			</div>

			<div class="row flex-fill" style="height:1px;">
				<div class="h-100">
					<ApexChart @ref="chart" TItem="IncomeSourceOverviewEntry" Height="@("100%")" Options="options">


						<ApexPointSeries TItem="IncomeSourceOverviewEntry"
										 Items="Data"
										 Name="Income"
										 XValue="@(e => e.Source)"
										 YValue="e=> e.Value"
										 SeriesType="SeriesType.Bar" />

					</ApexChart>
				</div>
			</div>
		</div>
	</div>
</div>

@code {

	private string currency = string.Empty;
	private ApexChart<IncomeSourceOverviewEntry>? chart;

	private ApexChartOptions<IncomeSourceOverviewEntry> options { get; set; } = new();

	public List<IncomeSourceOverviewEntry> Data { get; set; } = new List<IncomeSourceOverviewEntry>()
	{
		new IncomeSourceOverviewEntry()
		{
			Source = "Sallary",
			Value = 0
		},
	};

	public decimal Total;

	[Parameter]
	public string Height { get; set; } = "300px";

	[Parameter]
	public DateTime StartDateTime { get; set; }

	protected override void OnInitialized()
	{
		currency = settingsService.GetCurrency();
		options.Chart = new Chart
			{
				Toolbar = new ApexCharts.Toolbar
				{
					Show = false
				},

			};


		options.Xaxis = new XAxis()
			{
				AxisTicks = new AxisTicks()
				{
					Show = false,
				},
				AxisBorder = new AxisBorder()
				{
					Show = false
				},
				Position = XAxisPosition.Bottom,
				Type = XAxisType.Category

			};

		options.Yaxis = new List<YAxis>();

		options.Yaxis.Add(new YAxis
			{
				AxisTicks = new AxisTicks()
				{
					Show = false
				},
				Show = false,
				SeriesName = "income",
				DecimalsInFloat = 0,

			});

		options.Tooltip = new ApexCharts.Tooltip
			{
				Y = new TooltipY
				{
					Formatter = ChartHelper.GetCurrencyFormatter(settingsService.GetCurrency())
				}
			};

	}


	protected override async Task OnParametersSetAsync()
	{
		Data.Clear();
		if (chart is not null) await chart.UpdateSeriesAsync(true);
		await Task.Run(() =>
		{
			var bankAccounts = bankAccountRepository.GetAccounts<BankAccount>(StartDateTime, DateTime.Now)
			.Where(x => x.Entries is not null && x.Entries.Any());

			foreach (var account in bankAccounts)
			{
				if (account.Entries is null)continue;
			
				List<FinancialEntryBase> entries = account.Entries.Select(x => x as FinancialEntryBase).ToList();
				if ((DateTime.Now - StartDateTime).TotalDays > 6 * 31)
				{
					entries = entries.GetEntriesMonthlyValue();
				}
				else if ((DateTime.Now - StartDateTime).TotalDays > 31)
				{
					entries = entries.GetEntriesWeekly();
				}
				
				foreach (var entry in entries.Where(x => x.ValueChange > 0))
				{
					var dataEntry = Data.FirstOrDefault();
					if (dataEntry is null)
					{
						Data.Add(new IncomeSourceOverviewEntry()
							{
								Source = "Sallary",
								Value = entry.ValueChange
							});
					}
					else
					{
						dataEntry.Value += entry.ValueChange;
					}

				}
			}
			Total = Data.Sum(x => x.Value);

		});
		if (chart is not null) await chart.UpdateSeriesAsync(true);
	}
	public class IncomeSourceOverviewEntry
	{
		public string Source = string.Empty;
		public decimal Value;
	}

}

