@using CsvHelper
@using CsvHelper.Configuration
@using FinanceManager.Domain.Entities.Accounts
@using FinanceManager.Infrastructure.DtoMapping
@using FinanceManager.Infrastructure.Dtos
@using FinanceManager.Infrastructure.Readers
@using Microsoft.AspNetCore.Components.Forms
@using System.Globalization

<MudContainer>
    <MudPaper Class="p-3" Elevation="0">
        <MudText Typo="Typo.h2">Import data to <b>@AccountName</b> account</MudText>
        <MudStepper @bind-ActiveIndex="_stepIndex" OnPreviewInteraction="OnPreviewInteraction">
            <ChildContent>
                <MudStep Title="Select file" SecondaryText="Step1" @bind-Completed="_step1Complete">
                    <MudStack Style="width: 100%">
                        <MudForm @bind-IsValid="_isFormValid" @bind-IsTouched="_isTouched">
                            <MudItem xs="12">

                                @foreach (var error in _erorrs)
                                {
                                    <MudAlert Severity="Severity.Error" Class="my-2">@error</MudAlert>
                                }

                                @if (!_rawPreview.Any())
                                {
                                    <MudFileUpload Class="mt-3" T="IBrowserFile"
                                                   Hidden="@false"
                                                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                                                   InputStyle="opacity:0"
                                                   ErrorText="@string.Empty"
                                                   tabindex="-1"
                                                   @ondrop="@ClearDragClass"
                                                   @ondragenter="@SetDragClass"
                                                   @ondragleave="@ClearDragClass"
                                                   @ondragend="@ClearDragClass"
                                                   OnFilesChanged="UploadFiles">

                                        <ActivatorContent>
                                            <MudPaper Height="150px" Outlined="true" Class="@_dragClass">
                                                <MudText Typo="Typo.h6"> Drag and drop file here or click </MudText>
                                                @foreach (var item in LoadedFiles)
                                                {
                                                    <MudChip T="string" Color="Color.Dark" Text="@item.Name" />
                                                }

                                            </MudPaper>
                                        </ActivatorContent>
                                    </MudFileUpload>
                                }else
                                {
                                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                                        <ActivatorContent>
                                            <MudButton Variant="Variant.Filled"
                                                       Color="Color.Primary"
                                                       StartIcon="@Icons.Material.Filled.CloudUpload">
                                                Upload different file
                                            </MudButton>
                                        </ActivatorContent>
                                    </MudFileUpload>

                                    <MudGrid Justify="Justify.SpaceBetween" Class="my-2">
                                        <MudItem>
                                            <MudText Class="mt-3" Typo="Typo.h4">Preview</MudText>
                                        </MudItem>

                                        <MudItem xs="4">
                                            @{
                                                var _delimOptions = new List<(string Value, string Label)> { (",", "Comma (,)"), (";", "Semicolon (;)"), ("\t", "Tab (\\t)") };
                                            }
                                            <MudSelect T="string" Label="Delimiter" @bind-Value="_delimiter">
                                                @foreach (var opt in _delimOptions)
                                                {
                                                    <MudSelectItem T="string" Value="@opt.Value">@opt.Label</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                    </MudGrid>

                                    <div class="mt-2">
                                        <MudSimpleTable Style="overflow-x: auto;" Elevation="0">
                                            <thead>
                                                <tr>
                                                    @foreach (var h in _headers)
                                                    {
                                                        <th>@h</th>
                                                    }
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var row in _rawPreview)
                                                {
                                                    <tr>
                                                        @for (int i = 0; i < _headers.Count; i++)
                                                        {
                                                            <td>
                                                                @{
                                                                    if (i < row.Count)
                                                                    {
                                                                        var rowContent = new string(row[i].Take(20).ToArray());
                                                                        if (rowContent.Length == 20) rowContent += " ...";
                                                                        @(rowContent)
                                                                    }
                                                                    else
                                                                    {
                                                                        @(string.Empty)
                                                                    }
                                                                }
                                                            </td>
                                                        }
                                                    </tr>
                                                }
                                            </tbody>
                                        </MudSimpleTable>
                                    </div>
                                }

                            </MudItem>
                        </MudForm>
                    </MudStack>
                </MudStep>

                <MudStep Title="Validate" SecondaryText="Step2" @bind-Completed="_step2Complete" Disabled="@(_step1Complete == false)">
                    <MudGrid Class="mb-2">
                        <MudItem xs="12">
                            <MudStack Spacing="2">
                                <MudText Typo="Typo.h6">Select columns</MudText>
                                <MudGrid>
                                    <MudItem xs="6">
                                        <MudSelect T="string" Label="Posting date column" Value="_selectedPostingDateHeader" ValueChanged="@((string v) => { _selectedPostingDateHeader = v; OnMappingChanged(); })">
                                            @foreach (var h in _headers)
                                            {
                                                <MudSelectItem T="string" Value="@h">@h</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="6">
                                        <MudSelect T="string" Label="Value change column" Value="_selectedValueChangeHeader" ValueChanged="@((string v) => { _selectedValueChangeHeader = v; OnMappingChanged(); })">
                                            @foreach (var h in _headers)
                                            {
                                                <MudSelectItem T="string" Value="@h">@h</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                </MudGrid>

                                @if (_mappedPreview.Any())
                                {
                                    <MudText Typo="Typo.h4" Class="mt-4">Preview</MudText>

                                    <div class="my-2">
                                        <MudSimpleTable Style="overflow-x: auto;" Elevation="0">
                                            <thead>
                                                <tr>
                                                    <th>Posting date</th>
                                                    <th>Value change</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var row in _mappedPreview)
                                                {
                                                    <tr>
                                                        <td>@row.PostingDate</td>
                                                        <td>@row.ValueChange</td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </MudSimpleTable>
                                    </div>
                                }

                                @foreach (var error in _erorrs)
                                {
                                    <MudAlert Severity="Severity.Error">@error</MudAlert>
                                }

                            </MudStack>
                        </MudItem>
                    </MudGrid>
                </MudStep>
                <MudStep Title="Summary" SecondaryText="Step3" @bind-Completed="_step3Complete" Disabled="@(_step2Complete == false)">
                    @if (_isImportingData)
                    {
                        <div class="d-flex justify-content-center my-3">
                            <MudProgressCircular Size="Size.Large" Indeterminate="true" Color="Color.Primary" />
                        </div>
                    }
                    else
                    {
                        <MudText Class="my-5" Typo="Typo.h5">Summary</MudText>
                        <MudStack Spacing="2" Class="my-3">

                            @foreach (var errorInfo in _erorrs)
                            {
                                <MudAlert Severity="Severity.Error" Variant="Variant.Text"> @errorInfo</MudAlert>
                            }

                            @foreach (var warningInfo in _warnings)
                            {
                                <MudAlert Severity="Severity.Warning" Variant="Variant.Text"> @warningInfo</MudAlert>
                            }

                            @foreach (var summaryInfo in _summaryInfos)
                            {
                                <MudAlert Severity="Severity.Success" Variant="Variant.Text"> @summaryInfo</MudAlert>
                            }

                            @if (_importResult?.Conflicts?.Any() == true)
                            {
                                <MudGrid Class="mt-4">
                                    <MudItem xs="6">
                                        <MudText Typo="Typo.h6">Incoming</MudText>
                                        <MudSimpleTable Elevation="0">
                                            <thead>
                                                <tr>
                                                    <th>Posting date</th>
                                                    <th>Value change</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var c in _importResult.Conflicts.Where(c => c.Incoming is not null))
                                                {
                                                    <tr>
                                                        <td>@c.Incoming.PostingDate</td>
                                                        <td>@c.Incoming.ValueChange</td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </MudSimpleTable>
                                    </MudItem>
                                    <MudItem xs="6">
                                        <MudText Typo="Typo.h6">Existing match</MudText>
                                        <MudSimpleTable Elevation="0">
                                            <thead>
                                                <tr>
                                                    <th>Posting date</th>
                                                    <th>Value change</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var c in _importResult.Conflicts.Where(c => c.ExistingMatch is not null))
                                                {
                                                    <tr>
                                                        <td>@c.ExistingMatch.PostingDate</td>
                                                        <td>@c.ExistingMatch.ValueChange</td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </MudSimpleTable>
                                    </MudItem>
                                </MudGrid>
                            }

                        </MudStack>
                    }

                </MudStep>
            </ChildContent>

            <ActionContent Context="stepper">
                @if (_stepIndex != 2)
                {
                    <MudButton Color="Color.Error" Disabled="@(_stepIndex == 3)" OnClick="@Clear" Variant="Variant.Outlined">Clear</MudButton>
                    <MudSpacer />
                }
                @if (_stepIndex == 0)
                {
                    <MudButton Disabled="@(!_rawPreview.Any() || _headers.Count < 2)" OnClick="GoToNextStep" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Next step</MudButton>
                }
                @if (_stepIndex == 1)
                {
                    <MudButton @onclick=BeginImport Disabled="@(_erorrs.Any() || !_mappedPreview.Any())" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Begin import</MudButton>
                }
                @if (_stepIndex == 2)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_step3Complete)" href="@($"AccountDetails/{AccountId}")" Class="ml-auto">@($"Go back to {AccountName}")</MudButton>
                }
            </ActionContent>
        </MudStepper>
    </MudPaper>

</MudContainer>

