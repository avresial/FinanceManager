@using FinanceManager.Domain.Entities.Accounts
@using System.ComponentModel.DataAnnotations
@using FinanceManager.Domain.Enums
@using FinanceManager.Domain.Repositories
@using FinanceManager.Components.CustomValidationAttributes
@using FinanceManager.Domain.Repositories.Account
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor.Utilities
@using static MudBlazor.CategoryTypes

<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" FieldChanged=OnFieldChanged>
    <MudContainer MaxWidth="MaxWidth.Medium" onchange="">

        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="12" md="12">
                <MudText Typo="Typo.h4">Add new entry</MudText>
                <MudText Typo="Typo.subtitle1">@InvestmentAccount.Name</MudText>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudDatePicker Label="Posting date" @bind-Date="PostingDate" Validation="@(new NotInFutureAttribute())" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTimePicker Label="Time" @bind-Time="Time" Validation="@(new NotInFutureAttributeTime(PostingDate))" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="Ticker" T="string" Label="Ticker" Variant="Variant.Text" MaxLines="5" AutoGrow="true" Immediate />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudNumericField ReadOnly HideSpinButtons="true" @bind-Value="PricePerUnit" Label="Price per unit" Variant="Variant.Text" AdornmentText="@_currency" Adornment="Adornment.End" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudNumericField Required="true" HideSpinButtons="true" @bind-Value="BalanceChange"
                                 Label="Balance change" Variant="Variant.Text" Immediate />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudAutocomplete @bind-Value="ExpenseType" Label="Expense type" Variant="Variant.Text"
                                 SearchFunc="Search" />
            </MudItem>

            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick=Add>Add</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" DropShadow="false" OnClick=Cancel Class="mx-2">Cancel</MudButton>
                @if (CustomButton is not null)
                {
                    @CustomButton
                }
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudForm>

@code {

    private string _currency = string.Empty;
    private bool success;
    private string[] errors = { };
    private MudForm? form;

    private List<string> InvestmentType = Enum.GetValues(typeof(InvestmentType)).Cast<InvestmentType>().Select(x => x.ToString()).ToList();

    private DateTime? PostingDate = DateTime.Today;
    private TimeSpan? Time = new TimeSpan(01, 00, 00);
    public string ExpenseType { get; set; } = FinanceManager.Domain.Enums.InvestmentType.Stock.ToString();
    public string Ticker { get; set; } = string.Empty;
    public decimal? BalanceChange;
    public decimal? PricePerUnit { get; set; } = null;


    [Parameter]
    public RenderFragment? CustomButton { get; set; }

    [Parameter]
    public Func<Task>? ActionCompleted { get; set; }

    [Parameter]
    public required StockAccount InvestmentAccount { get; set; }

    [Inject]
    public required IFinancalAccountRepository FinancalAccountRepository { get; set; }

    [Inject]
    public required ISettingsService SettingsService { get; set; }

    [Inject]
    public required IStockRepository StockRepository { get; set; }


    protected async Task OnFieldChanged(FormFieldChangedEventArgs args)
    {
        if (string.IsNullOrEmpty(Ticker)) return;
        if (!PostingDate.HasValue) return;
        if (args.Field is MudTextField<decimal?> textField)
        {
            if (textField is null || textField.Label is null) return;
            if (!textField.Label.ToLower().Contains("ticker")) return;
        }

        if (args.Field is MudNumericField<decimal?> numericField)
        {
            if (numericField is null || numericField.Label is null) return;
            if (!numericField.Label.ToLower().Contains("change")) return;
        }

        var pricePerUnit = await StockRepository.GetStockPrice(Ticker, PostingDate.Value);
        if (pricePerUnit is null) return;

        PricePerUnit = BalanceChange * pricePerUnit.PricePerUnit;
    }
    protected override Task OnParametersSetAsync()
    {
        _currency = SettingsService.GetCurrency();
        return base.OnParametersSetAsync();
    }

    public async Task Add()
    {
        if (form is null)  return;
        await form.Validate();

        if (!form.IsValid) return;
        if (!BalanceChange.HasValue) return;
        if (!PostingDate.HasValue) return;
        if (!Time.HasValue) return;

        DateTime date = new DateTime(PostingDate.Value.Year, PostingDate.Value.Month, PostingDate.Value.Day, Time.Value.Hours, Time.Value.Minutes, Time.Value.Seconds);
        InvestmentType investmentType = FinanceManager.Domain.Enums.InvestmentType.Stock;

        try
        {
            investmentType = (InvestmentType)Enum.Parse(typeof(InvestmentType), ExpenseType);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        var id = 0;
        var currentMaxId = InvestmentAccount.GetMaxId();
        if (currentMaxId is not null)
            id += currentMaxId.Value + 1;

        StockEntry entry = new(id, date.ToUniversalTime(), -1, BalanceChange.Value, Ticker, investmentType);

        try
        {
            InvestmentAccount.Add(new AddInvestmentEntryDto(entry.PostingDate, entry.ValueChange, entry.Ticker, entry.InvestmentType));
            FinancalAccountRepository.AddEntry(entry, InvestmentAccount.AccountId);
        }
        catch (Exception ex)
        {
            errors = [ex.ToString()];
        }

        if (ActionCompleted is not null)
            await ActionCompleted();
    }

    public async Task Cancel()
    {
        if (ActionCompleted is not null)
            await ActionCompleted();
    }
    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return InvestmentType;

        return await Task.FromResult(InvestmentType.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
    }
}
