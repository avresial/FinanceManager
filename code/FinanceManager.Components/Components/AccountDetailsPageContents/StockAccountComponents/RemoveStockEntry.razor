@using FinanceManager.Domain.Entities
@using FinanceManager.Domain.Entities.Accounts;
@using FinanceManager.Domain.Entities.Accounts.Entries

@if (InvestmentEntry is not null)
{
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="12" md="12">
                <MudText Typo="Typo.h4">Remove</MudText>
                <MudText Typo="Typo.subtitle1">@InvestmentAccountName</MudText>
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="ticker" T="string" Label="ticker" Variant="Variant.Text" MaxLines="5" AutoGrow="true" ReadOnly />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudNumericField Required="true" HideSpinButtons="true" @bind-Value="balanceChange" Label="Balance change" Variant="Variant.Text" AdornmentText="@currency" Adornment="Adornment.End" ReadOnly />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudDatePicker Label="Posting date" @bind-Date="date" ReadOnly />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="investmentType" T="string" Label="investmentType" Variant="Variant.Text" MaxLines="5" AutoGrow="true" ReadOnly />
            </MudItem>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick=Cancel>Cancel</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" DropShadow="false" OnClick=Confirm Class="mx-2">Confirm</MudButton>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    private DateTime? date = new DateTime();
    private decimal balanceChange = 0;
    private string currency = DefaultCurrency.Currency;
    private string ticker = "Ticker";
    private string investmentType = "InvestmentType";

    [Parameter] public required Func<Task> Confirm { get; set; }
    [Parameter] public required Func<Task> Cancel { get; set; }
    [Parameter] public required string InvestmentAccountName { get; set; }
    [Parameter] public required StockAccountEntry InvestmentEntry { get; set; }

    [Inject] public required ISettingsService SettingsService { get; set; }

    protected override void OnParametersSet()
    {
        date = InvestmentEntry.PostingDate;
        balanceChange = InvestmentEntry.ValueChange;
        currency = SettingsService.GetCurrency();
        ticker = InvestmentEntry.Ticker;
        investmentType = InvestmentEntry.InvestmentType.ToString();

        base.OnParametersSet();
    }

}