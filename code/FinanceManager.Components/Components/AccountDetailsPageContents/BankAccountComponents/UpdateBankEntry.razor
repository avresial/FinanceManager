@using FinanceManager.Domain.Entities.Accounts
@using System.ComponentModel.DataAnnotations
@using FinanceManager.Domain.Enums
@using FinanceManager.Domain.Repositories
@using FinanceManager.Components.CustomValidationAttributes
@using FinanceManager.Domain.Repositories.Account
@inject ISettingsService settingsService

@if (BankAccountEntry is not null && BankAccount is not null)
{
    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12" sm="12" md="12">
                    <MudText Typo="Typo.h4">Update</MudText>
                    <MudText Typo="Typo.subtitle1">@BankAccount.Name</MudText>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTimePicker Label="Time" @bind-Time="Time" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudDatePicker Label="Posting date" @bind-Date="PostingDate" Validation="@(new NotInFutureAttribute())" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudNumericField Required="true" HideSpinButtons="true" @bind-Value="BalanceChange" Label="Balance change" Variant="Variant.Text" AdornmentText="@_currency" Adornment="Adornment.End" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudAutocomplete @bind-Value="ExpenseType" Label="Expense type" Variant="Variant.Text" SearchFunc="Search" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Description" T="string" Label="Description" Variant="Variant.Text" MaxLines="5" AutoGrow="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick=Update>Update</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" DropShadow="false" OnClick=Cancel Class="mx-2">Cancel</MudButton>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudForm>
}

@code {
    private int? loadedEntryId = null;
    private string _currency = string.Empty;
    private bool success;
    private string[] errors = { };
    private MudForm? form;

    private List<string> ExpenseTypes = Enum.GetValues(typeof(ExpenseType)).Cast<ExpenseType>().Select(x => x.ToString()).ToList();

    private TimeSpan? Time = new TimeSpan(01, 00, 00);
    private DateTime? PostingDate = DateTime.Today;
    private string? ExpenseType { get; set; } = FinanceManager.Domain.Enums.ExpenseType.Other.ToString();
    private string? Description { get; set; } = string.Empty;
    private decimal? BalanceChange { get; set; } = 0;

    [Parameter]
    public Func<Task>? ActionCompleted { get; set; }

    [Parameter]
    public required BankAccount BankAccount { get; set; }

    [Parameter]
    public required BankAccountEntry BankAccountEntry { get; set; }

    [Inject]
    public required IFinancalAccountRepository FinancalAccountRepository { get; set; }

    protected override void OnParametersSet()
    {
        if (loadedEntryId.HasValue && loadedEntryId.Value == BankAccountEntry.Id) return;
        loadedEntryId = BankAccountEntry.Id;

        _currency = settingsService.GetCurrency();
        PostingDate = BankAccountEntry.PostingDate;
        Time = new TimeSpan(BankAccountEntry.PostingDate.Hour, BankAccountEntry.PostingDate.Minute, BankAccountEntry.PostingDate.Second);
        ExpenseType = BankAccountEntry.ExpenseType.ToString();
        Description = BankAccountEntry.Description;
        BalanceChange = BankAccountEntry.ValueChange;
    }

    public async Task Update()
    {
        if (form is null) return;
        await form.Validate();

        if (!form.IsValid) return;
        if (!BalanceChange.HasValue) return;
        if (!PostingDate.HasValue) return;
        if (!Time.HasValue) return;

        DateTime date = new DateTime(PostingDate.Value.Year, PostingDate.Value.Month, PostingDate.Value.Day, Time.Value.Hours, Time.Value.Minutes, Time.Value.Seconds);
        ExpenseType expenseType = FinanceManager.Domain.Enums.ExpenseType.Other;
        try
        {
            if (ExpenseType is not null)
                expenseType = (ExpenseType)Enum.Parse(typeof(ExpenseType), ExpenseType);
        }
        catch (Exception)
        {
        }

        BankAccountEntry bankAccountEntry = new(BankAccountEntry.Id, date, -1, BalanceChange.Value)
            {
                Description = this.Description is null ? string.Empty : this.Description,
                ExpenseType = expenseType
            };
        try
        {
            BankAccount.UpdateEntry(bankAccountEntry);
            FinancalAccountRepository.UpdateEntry(bankAccountEntry, BankAccount.AccountId);
        }
        catch (Exception ex)
        {
            errors = [ex.ToString()];
        }

        if (ActionCompleted is not null)
            await ActionCompleted();
    }

    public async Task Cancel()
    {
        if (ActionCompleted is not null)
            await ActionCompleted();
    }

    private async Task<IEnumerable<string?>> Search(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return ExpenseTypes;

        return await Task.FromResult(ExpenseTypes.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
    }
}
